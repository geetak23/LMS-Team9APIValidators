{
	"info": {
		"_postman_id": "16bee62d-8f2b-4d2f-843a-a11f73fc34ff",
		"name": "Team9-APIValidators",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29256354"
	},
	"item": [
		{
			"name": "Integration Testing",
			"item": [
				{
					"name": "DataDriven Integration Testing",
					"item": [
						{
							"name": "UserSignIndata",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiType = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase(); \r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase(); \r",
											"\r",
											"\r",
											"const requestJson = JSON.parse(pm.request.body.raw);\r",
											"pm.variables.set(\"userEmailId\", pm.iterationData.get(\"userLoginEmailId\"));\r",
											"\r",
											"pm.variables.set('statusCode',pm.iterationData.get(\"StatusCode\"));\r",
											"pm.variables.set('statusMessage',pm.iterationData.get(\"StatusMessage\"));\r",
											"pm.variables.set(\"TestCase\",pm.iterationData.get(\"TestCase\"));\r",
											"\r",
											"var constructedUrl = baseUrl + apiType;\r",
											"\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {    \r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"const currentTestType = pm.iterationData.get(\"CurrentTestType\"); \r",
											" pm.collectionVariables.set(\"CurrentTestType\",currentTestType);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Response Time : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(`Token is present : ${pm.variables.get('TestCase')}`, function () {  \r",
											"    pm.expect(jsonResponse).to.have.property('token').that.is.a('string').and.is.not.empty;  \r",
											"    pm.collectionVariables.set(\"authToken\", jsonResponse.token);\r",
											"});\r",
											"\r",
											"pm.test(`Type of the tokenn is Bearer : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.expect(jsonResponse).to.have.property('type').that.is.a('string').and.is.not.empty;  \r",
											"    pm.expect(jsonResponse.type).to.eql('Bearer'); \r",
											"\r",
											"});\r",
											"pm.test(`UserId status with U : : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.expect(jsonResponse).to.have.property('userId').that.is.a('string').and.is.not.empty;   \r",
											"     pm.expect(jsonResponse.userId.startsWith(\"U\")).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(`Roles must be an Array and shoule have values of (ROLE_ADMIN, ROLE_STAFF, ROLE_STUDENT) : : ${pm.variables.get('TestCase')}`, function () {\r",
											"  var allowedRoles = [\"ROLE_ADMIN\", \"ROLE_STAFF\", \"ROLE_STUDENT\"];\r",
											"    pm.expect(jsonResponse).to.have.property('roles');\r",
											"    pm.expect(jsonResponse.roles).to.be.an('array').that.is.not.empty;\r",
											"    var validRoleFound = jsonResponse.roles.some(role => allowedRoles.includes(role));\r",
											"    pm.expect(validRoleFound).to.be.true; \r",
											"});\r",
											"\r",
											"pm.test(`Status is Active/Inactive : ${pm.variables.get('TestCase')}`, function () {  \r",
											"    pm.expect([\"Active\", \"Inactive\"]).to.include(jsonResponse.status);\r",
											"});\r",
											"\r",
											"pm.test(`Password Expired is false : ${pm.variables.get('TestCase')}`, function () {  \r",
											"   pm.expect(jsonResponse).to.have.property('passwordExpired').to.eq(false);\r",
											"});\r",
											"pm.test(`UserEmailId in response matches with the request : ${pm.variables.get('TestCase')}`, function () {\r",
											"    var responseUserEmail = jsonResponse.email;  \r",
											"    var requestUserEmail = pm.variables.get(\"userEmailId\");\r",
											"    pm.expect(responseUserEmail).to.eql(requestUserEmail);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userLoginEmailId\": \"{{userLoginEmailId}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/login",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Program [Post Operation]DD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"pm.test(\"Status code is 201\",  () => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});*/\r",
											"console.log(pm.variables.get(\"TestCase\"));\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.responseTime.to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.code.to.be.oneOf([200, 201]);\r",
											"});\r",
											"pm.test(\"Validate Response Body Structure and Data Types\", function () {\r",
											"    let response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"programName\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"programStatus\").that.is.a(\"string\");\r",
											"    \r",
											"});\r",
											"pm.test(\"Validate Specific Response Data Values\", function () {\r",
											"    let response = pm.response.json();\r",
											"    pm.expect(response.programName).to.eql(pm.variables.get(\"programName\"));\r",
											"    pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
											"    //pm.expect(response.userFirstName).to.eql(\"{{userFirstName}}\");\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"var responseData = pm.response.json();\r",
											" var programId = responseData.programId;\r",
											"  var programName = responseData.programName;\r",
											"\r",
											" console.log('programId'+programId);\r",
											"  console.log('programName'+programName);\r",
											" pm.collectionVariables.set(\"programId\",programId);\r",
											" pm.collectionVariables.set(\"programName\",programName);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*console.log(pm.iterationData && Object.keys(pm.iterationData.toObject()).length);\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0)\r",
											"{*/\r",
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"\r",
											"var apiEndpoint=pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var TestCase=pm.iterationData.get(\"TestCase\");\r",
											"var expectedStatusCode=pm.iterationData.get(\"StatusCode\");\r",
											"var expectedStatusMessage=pm.iterationData.get(\"StatusMessage\");\r",
											"\r",
											"var constructedUrl=baseUrl+ apiEndpoint;\r",
											"\r",
											"\r",
											"\r",
											"if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"{\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else\r",
											"{\r",
											"pm.variables.set(\"programDescription\", pm.iterationData.get(\"programDescription\"));\r",
											"pm.variables.set(\"programName\", pm.iterationData.get(\"programName\"));\r",
											"pm.variables.set(\"programStatus\", pm.iterationData.get(\"programStatus\"));\r",
											"\r",
											"//checking status code and testcase where data is getting from csv file//\r",
											"pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"expectedStatusCode\"));\r",
											"pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"expectedStatusMessage\"));\r",
											"\r",
											"}\r",
											"\r",
											"if (!pm.variables.get(\"programName\") || !pm.variables.get(\"programStatus\")) {\r",
											"    throw new Error(\"Mandatory fields `programName` or `programStatus` are missing from data file.\");\r",
											"}\r",
											"console.log(\"Pre-request script executed successfully. Ready to send the request.\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"{{programDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/saveprogram",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "createNewBatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndPoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.collectionVariables.replaceIn(pm.request.url).toString();\r",
											"\r",
											"var actualMethod = pm.request.method.toUpperCase(); \r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase(); \r",
											"\r",
											"pm.variables.set('statusCode',pm.iterationData.get(\"StatusCode\"));\r",
											"pm.variables.set('statusMessage',pm.iterationData.get(\"StatusMessage\"));\r",
											"pm.variables.set(\"TestCase\",pm.iterationData.get(\"TestCase\"));\r",
											"\r",
											"var constructedUrl = baseUrl  + apiEndPoint;\r",
											"\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {    \r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"const batchNameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/; \r",
											"const requestJson = JSON.parse(pm.request.body.raw);\r",
											" \r",
											" var batchName=pm.iterationData.get(\"batchName\");\r",
											" var batchStatus=pm.iterationData.get(\"batchStatus\");\r",
											" var batchNoOfClasses=Number(pm.iterationData.get(\"batchNoOfClasses\")); \r",
											" var batchProgramId=Number(pm.collectionVariables.get(\"programId\"));\r",
											"\r",
											"\r",
											" \r",
											" if(batchName==null || batchName.length==0 ||!batchNameRegExp.test(batchName)){   \r",
											"    console.log(\"batchName must begin with letter and can have letters,numbers and sometimes hyphens\"); \r",
											"    \r",
											"    pm.execution.skipRequest();\r",
											" }\r",
											" else if(batchNoOfClasses<=0 || batchNoOfClasses>99)\r",
											" {\r",
											"    console.log(\"No of classes must be within 1 to 99\")\r",
											"    pm.execution.skipRequest();\r",
											" }\r",
											" else  if(!(batchStatus.toUpperCase() === \"ACTIVE\" || batchStatus.toUpperCase() === \"INACTIVE\"))\r",
											" {\r",
											"    console.log(\"BatchStatus must be either Active/Inactive\")\r",
											"    pm.execution.skipRequest();\r",
											" }\r",
											"else if(! typeof batchProgramId === \"number\" || isNaN(batchProgramId))\r",
											"{\r",
											"    console.log(\"Batch Program Id must be a number\")\r",
											"    pm.execution.skipRequest();\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"let jsonRequest = JSON.parse(pm.request.body.raw); \r",
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"    pm.collectionVariables.set(\"batchId\", jsonResponse.batchId);\r",
											"    pm.collectionVariables.set(\"batchname\", jsonResponse.batchName);\r",
											"    pm.collectionVariables.set(\"programId\",jsonResponse.programId);\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Response Time ${pm.response.responseTime} : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(`Batch Id is Present and must be a number : ${pm.variables.get(\"TestCase\")}`, function() {    \r",
											"    pm.expect(jsonResponse).to.have.property(\"batchId\").to.be.a(\"number\").and.not.NaN;   \r",
											"});\r",
											"\r",
											"pm.test(`Response body is the same as request body: ${pm.variables.get(\"TestCase\")}`,\r",
											"function() {\r",
											"    pm.expect(jsonRequest.batchName).to.eql(jsonResponse.batchName);\r",
											"    pm.expect(jsonRequest.batchStatus).to.eql(jsonResponse.batchStatus);\r",
											"    pm.expect(jsonRequest.batchNoOfClasses.toString()).to.eq(jsonResponse.batchNoOfClasses.toString());\r",
											"    pm.expect(pm.variables.get(\"programId\")).to.eq(jsonResponse.programId);\r",
											"});\r",
											"\r",
											"pm.test(`Batch Program Name is Present and must be string : ${pm.variables.get(\"TestCase\")}`, function() {    \r",
											"    pm.expect(jsonResponse).to.have.property(\"programName\");\r",
											"    pm.expect(typeof jsonResponse.programName).to.eql('string'); \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchName\": \"{{batchName}}\",\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"programId\": \"{{programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/batches",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostUser",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * ",
											" * Check the request type and expected url value from csv file with actual request type and actual url in postman,if both are different,then it will skip that request",
											" */",
											"",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();",
											"var actualMethod = pm.request.method.toUpperCase();",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();",
											"var constructedUrl=baseUrl + apiEndpoint;",
											"",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {",
											"     pm.execution.skipRequest();",
											"}",
											"else{",
											"    var countryCode = \"+91\";",
											"     pm.collectionVariables.set(\"phoneNumber\", countryCode + ' ' +pm.iterationData.get(\"userPhoneNumber\"));",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"const validRoleIds = [\"R01\", \"R02\", \"R03\"];",
											"",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"",
											"}",
											"",
											"else if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"else if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"else if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"else if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"else if(rId == null || rId.length==0)",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"else if(!validRoleIds.includes(rId))",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"",
											"else if(rstatus == null || rstatus.length==0)",
											"{",
											"    console.log(\"Role status is required\");",
											"}",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));",
											"});",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));",
											"});",
											"var responseData = pm.response.json();",
											" var userId = responseData.user.userId;",
											"  var roleId = responseData.roles[0].roleId;",
											"",
											" pm.collectionVariables.set(\"userId\",userId);",
											" pm.collectionVariables.set(\"roleId\",roleId);",
											" var schema = {",
											"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",",
											"    \"$ref\": \"#/definitions/Welcome5\",",
											"    \"definitions\": {",
											"        \"Welcome5\": {",
											"            \"type\": \"object\",",
											"            \"additionalProperties\": false,",
											"            \"properties\": {",
											"                \"userComments\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userEduPg\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userEduUg\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userFirstName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userId\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userLastName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userLinkedinUrl\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userLocation\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userMiddleName\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userPhoneNumber\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"userTimeZone\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userVisaStatus\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"userLoginEmail\": {",
											"                    \"type\": \"string\"",
											"                }",
											"            },",
											"            \"required\": [",
											"                \"userComments\",",
											"                \"userEduPg\",",
											"                \"userEduUg\",",
											"                \"userFirstName\",",
											"                \"userId\",",
											"                \"userLastName\",",
											"                \"userLinkedinUrl\",",
											"                \"userLocation\",",
											"                \"userLoginEmail\",",
											"                \"userMiddleName\",",
											"                \"userPhoneNumber\",",
											"                \"userTimeZone\",",
											"                \"userVisaStatus\"",
											"            ],",
											"            \"title\": \"Welcome5\"",
											"        }",
											"    }",
											"}",
											"var rData = pm.response.json();",
											"pm.test(\"Response body matches schema\", function () {",
											"    pm.expect(tv4.validate(rData, schema)).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"{{userComments}}\",\n\"userEduPg\": \"{{userEduPg}}\",\n\"userEduUg\": \"{{userEduUg}}\",\n\"userFirstName\": \"{{userFirstName}}\",\n\"userLastName\": \"{{userLastName}}\",\n\"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n\"userLocation\": \"{{userLocation}}\",\n\"userMiddleName\": \"{{userMiddleName}}\",\n\"userPhoneNumber\": \"{{phoneNumber}}\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"{{roleId}}\",\n\"userRoleStatus\": \"{{userRoleStatus}}\"\n}\n],\n\"userTimeZone\": \"{{userTimeZone}}\",\n\"userVisaStatus\": \"{{userVisaStatus}}\",\n\"userLogin\": {\n        \"loginStatus\": \"{{loginStatus}}\",\n        \"userLoginEmail\": \"{{userLoginEmail}}\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Class",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"ClassId\", jsonData.csId);\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"ClassTopic\", jsonData.classTopic);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"status text has Created\", function (){\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains batchId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNo\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDate\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classTopic\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classTopic\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStatus\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStatus\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStaffId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStaffId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDescription\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDescription\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classComments\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classComments\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNotes\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNotes\");\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"var constructedUrl=baseUrl + apiEndpoint;\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":\"{{batchId}}\",\r\n\"classNo\": 1,\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\",\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\r\n\"{{classScheduleDates}}\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Program by ProgramId [Get Operation] DD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*console.log(pm.iterationData && Object.keys(pm.iterationData.toObject()).length);\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0)\r",
											"{*/\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var programId = pm.collectionVariables.get(\"programId\") || \"\"; \r",
											"var apiEndpoint=pm.iterationData.get(\"EndPoint\");\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{programId}}\", programId);\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var TestCase=pm.iterationData.get(\"TestCase\");\r",
											"var expectedStatusCode=pm.iterationData.get(\"StatusCode\");\r",
											"var expectedStatusMessage=pm.iterationData.get(\"StatusMessage\");\r",
											"\r",
											"var constructedUrl=baseUrl+ expectedApiEndpoint;\r",
											"\r",
											"if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"{\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else\r",
											"{\r",
											"\r",
											"//checking status code and testcase where data is getting from csv file//\r",
											"pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"expectedStatusCode\"));\r",
											"pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"expectedStatusMessage\"));\r",
											"\r",
											"}\r",
											"\r",
											"console.log(\"Pre-request script executed successfully.\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.log(pm.variables.get(\"TestCase\"));\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"//\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.responseTime.to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.code.to.be.oneOf([200, 201]);\r",
											"});\r",
											"var responseData = pm.response.json();\r",
											"  var programName = responseData.programName;\r",
											"  var programId = responseData.programId;\r",
											"\r",
											" console.log('programId'+programId);\r",
											"  console.log('programName'+programName);\r",
											" pm.collectionVariables.set(\"programId\",programId);\r",
											" pm.collectionVariables.set(\"programName\",programName);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/programs/{{programId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"programs",
										"{{programId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getBatchByBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var batchId = pm.collectionVariables.get(\"batchId\");\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{batchId}}\", batchId);\r",
											"\r",
											"var actualMethod = pm.request.method.toString().toUpperCase(); \r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase(); \r",
											"\r",
											"console.log(\"expectedMethod :\" + expectedMethod);\r",
											"pm.variables.set('statusCode',pm.iterationData.get(\"StatusCode\"));\r",
											"pm.variables.set('statusMessage',pm.iterationData.get(\"StatusMessage\"));\r",
											"pm.variables.set(\"TestCase\",pm.iterationData.get(\"TestCase\"));\r",
											"\r",
											"var constructedUrl = baseUrl  +  expectedApiEndpoint;\r",
											"console.log(\"constructed url : \" + constructedUrl);\r",
											"console.log(\"actual Url :\"+ actualUrl);\r",
											"console.log(\"Match :\" + constructedUrl != actualUrl || expectedMethod != actualMethod);\r",
											"\r",
											" if (constructedUrl != actualUrl || expectedMethod != actualMethod) {    \r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											" var batchId=Number(actualUrl.substring(actualUrl.lastIndexOf(\"/\")+1));  \r",
											" var batchId=Number(actualUrl.substring(actualUrl.lastIndexOf(\"/\")+1));\r",
											" pm.variables.set('reqBatchId', batchId);\r",
											"if (isNaN(batchId)) {\r",
											"    console.log(\"BatchId is a valid number: \" + batchId);\r",
											"    pm.execution.skipRequest();\r",
											"} \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Response Time : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// pm.test(`BatchId in response matches with request BatchId : ${pm.variables.get(\"TestCase\")}`, function () { \r",
											"//     var requestBatchId = pm.variables.get('reqBatchId');  \r",
											"//     pm.expect(jsonResponse.batchId).to.eql(requestBatchId);\r",
											"// });\r",
											"\r",
											"// pm.test(`Check if batchName is present and matches the pattern : ${pm.variables.get(\"TestCase\")}`, function () { \r",
											"//     const batchNamePattern = /^[a-zA-Z][a-zA-Z0-9-]+$/;    \r",
											"//     pm.expect(jsonResponse.batchName).to.not.be.empty; \r",
											"//     pm.expect(jsonResponse.batchName).to.match(batchNamePattern);\r",
											"// });\r",
											"// pm.test(`Check batchNoOfClasses is between 1 and 99 : ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"//     pm.expect(jsonResponse).to.have.property(\"batchNoOfClasses\").to.be.above(0).to.be.below(99);\r",
											"// });\r",
											"\r",
											"// pm.test(`Check batchStatus is Active or Inactive : ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"//     pm.expect(jsonResponse).to.have.property(\"batchStatus\").to.be.oneOf([\"Active\", \"Inactive\",\"ACTIVE\", \"INACTIVE\"]);\r",
											"// });\r",
											"\r",
											"// pm.test(`Check programId is present and it is a valid number: ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"//      pm.expect(jsonResponse).to.have.property(\"programId\").to.be.a(\"number\").and.not.NaN;\r",
											"  \r",
											"// });\r",
											"// pm.test(`Batch Program Name is Present: ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"//     pm.expect(jsonResponse).to.have.property(\"programName\");\r",
											"//     pm.expect(typeof jsonResponse.programName).to.eql('string');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/batchId/{{batchId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"batchId",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getBatchByBatchName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var batchName = pm.collectionVariables.get(\"batchname\");\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{batchName}}\", batchName);\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase(); \r",
											"\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toString().toUpperCase(); \r",
											"var constructedUrl = baseUrl  + expectedApiEndpoint;\r",
											" console.log(\"constructed Url:\"+ constructedUrl);\r",
											" console.log(\"actual Url:\"+ actualUrl);\r",
											"\r",
											"pm.variables.set('statusCode',pm.iterationData.get(\"StatusCode\"));\r",
											"pm.variables.set('statusMessage',pm.iterationData.get(\"StatusMessage\"));\r",
											"pm.variables.set(\"TestCase\",pm.iterationData.get(\"TestCase\"));\r",
											"\r",
											"\r",
											"\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {    \r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"\r",
											"var batchName=actualUrl.substring(actualUrl.lastIndexOf(\"/\")+1);\r",
											"pm.variables.set('reqBatchName', batchName);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonResponseArr=pm.response.json();\r",
											"var jsonResponse=null;\r",
											"\r",
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Response Time  ${pm.response.responseTime} : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(`Batch Name is unique only one batch exist: ${pm.variables.get('TestCase')}`, function () {\r",
											"   pm.expect(jsonResponseArr.length).to.eql(1);\r",
											"   jsonResponse=jsonResponseArr[0];\r",
											"});\r",
											"\r",
											"pm.test(`Batch Name in response matches with request batch name : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var requestBatchName = pm.variables.get('reqBatchName'); \r",
											"    pm.expect(jsonResponse.batchName).to.eql(requestBatchName);\r",
											"});\r",
											"\r",
											"pm.test(`Batch Id is Present and must be a number : ${pm.variables.get('TestCase')}`, function() {    \r",
											"    pm.expect(jsonResponse).to.have.property(\"batchId\").to.be.a(\"number\").and.not.NaN;   \r",
											"});\r",
											"\r",
											"pm.test(`Check batchNoOfClasses is between 1 and 99 : ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"    pm.expect(jsonResponse).to.have.property(\"batchNoOfClasses\").to.be.above(0).to.be.below(99);\r",
											"});\r",
											"\r",
											"pm.test(`Check batchStatus is Active or Inactive : ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"    pm.expect(jsonResponse).to.have.property(\"batchStatus\").to.be.oneOf([\"Active\", \"Inactive\",\"ACTIVE\", \"INACTIVE\"]);\r",
											"});\r",
											"\r",
											"pm.test(`Check programId is present and it is a valid number : ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"     pm.expect(jsonResponse).to.have.property(\"programId\").to.be.a(\"number\").and.not.NaN;\r",
											"  \r",
											"});\r",
											"pm.test(`Batch Program Name is Present : ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"    pm.expect(jsonResponse).to.have.property(\"programName\"); \r",
											"    pm.expect(typeof jsonResponse.programName).to.eql('string');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/batchName/{{batchname}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"batchName",
										"{{batchname}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByUserId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();",
											"var actualMethod = pm.request.method.toUpperCase();",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();",
											"var userId = pm.collectionVariables.get(\"userId\") || \"\"; // Get userId if set",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{userId}}\", userId);",
											"var constructedUrl=baseUrl + expectedApiEndpoint;",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {",
											"     pm.execution.skipRequest();",
											"}",
											"else{",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {",
											"     pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));",
											"});",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get class details by ClassId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Class ID matches the collection variable\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.csId).to.eql(parseInt(pm.collectionVariables.get(\"ClassId\"))); //Added parseInt to match the variable type\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains batchId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNo\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDate\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classTopic\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classTopic\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStatus\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStatus\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStaffId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStaffId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDescription\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDescription\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classComments\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classComments\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNotes\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNotes\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains batchName\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classScheduledDates\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classScheduledDates\");\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var ClassId = pm.collectionVariables.get(\"ClassId\") || \"\"; // Get userId if set\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{ClassId}}\", ClassId);\r",
											"\r",
											"var constructedUrl=baseUrl + expectedApiEndpoint;\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/class/{{ClassId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"class",
										"{{ClassId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all classes by ClassTopic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains batchId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNo\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDate\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classTopic\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classTopic\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStatus\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStatus\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStaffId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStaffId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDescription\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDescription\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classComments\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classComments\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNotes\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNotes\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains batchName\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classScheduledDates\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classScheduledDates\");\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var ClassTopic = pm.collectionVariables.get(\"ClassTopic\") || \"\"; // Get userId if set\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{ClassTopic}}\", ClassTopic);\r",
											"\r",
											"var constructedUrl=baseUrl + expectedApiEndpoint;\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classes/{{ClassTopic}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classes",
										"{{ClassTopic}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by ProgramId [Put Operation] DD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*console.log(pm.iterationData && Object.keys(pm.iterationData.toObject()).length);\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0)\r",
											"{*/\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var programId = pm.collectionVariables.get(\"programId\") || \"\"; \r",
											"var apiEndpoint=pm.iterationData.get(\"EndPoint\");\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{programId}}\", programId);\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var TestCase=pm.iterationData.get(\"TestCase\");\r",
											"var expectedStatusCode=pm.iterationData.get(\"StatusCode\");\r",
											"var expectedStatusMessage=pm.iterationData.get(\"StatusMessage\");\r",
											"\r",
											"var constructedUrl=baseUrl+ expectedApiEndpoint;\r",
											"\r",
											"//var constructedUrl=baseUrl+ apiEndpoint;\r",
											"console.log(\"constructedUrl\"+constructedUrl);\r",
											"console.log(\"actualUrl\"+actualUrl);\r",
											"console.log(\"actualMethod\"+actualMethod);\r",
											"console.log(\"expectedMethod\"+expectedMethod);\r",
											"\r",
											"if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"{\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else\r",
											"{\r",
											"pm.variables.set(\"programDescription\", pm.iterationData.get(\"programDescription\"));\r",
											"pm.variables.set(\"programName\", pm.iterationData.get(\"programName\"));\r",
											"pm.variables.set(\"programStatus\", pm.iterationData.get(\"programStatus\"));\r",
											"\r",
											"//checking status code and testcase where data is getting from csv file//\r",
											"pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"expectedStatusCode\"));\r",
											"pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"expectedStatusMessage\"));\r",
											"\r",
											"}\r",
											"\r",
											"if (!pm.variables.get(\"programName\") || !pm.variables.get(\"programStatus\")) {\r",
											"    throw new Error(\"Mandatory fields `programName` or `programStatus` are missing from data file.\");\r",
											"}\r",
											"console.log(\"Pre-request script executed successfully. Ready to send the request.\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"pm.test(\"Status code is 201\",  () => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});*/\r",
											"console.log(pm.variables.get(\"TestCase\"));\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.responseTime.to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.code.to.be.oneOf([200, 201]);\r",
											"});\r",
											"pm.test(\"Validate Response Body Structure and Data Types\", function () {\r",
											"    let response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"programName\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"programStatus\").that.is.a(\"string\");\r",
											"    \r",
											"});\r",
											"pm.test(\"Validate Specific Response Data Values\", function () {\r",
											"    let response = pm.response.json();\r",
											"    pm.expect(response.programName).to.eql(pm.variables.get(\"programName\"));\r",
											"    pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
											"    //pm.expect(response.userFirstName).to.eql(\"{{userFirstName}}\");\r",
											"    \r",
											"});\r",
											"var responseData = pm.response.json();\r",
											"  var programName = responseData.programName;\r",
											"\r",
											"  console.log('programName'+programName);\r",
											" pm.collectionVariables.set(\"programName\",programName);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"{{programDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/putprogram/{{programId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"putprogram",
										"{{programId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateBatchByBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const batchNameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/; \r",
											"const requestJson = JSON.parse(pm.request.body.raw);\r",
											" \r",
											"  var batchName=pm.iterationData.get(\"batchName\");\r",
											" var batchStatus=pm.iterationData.get(\"batchStatus\");\r",
											" var batchNoOfClasses=Number(pm.iterationData.get(\"batchNoOfClasses\")); \r",
											" var batchProgramId=Number(pm.iterationData.get(\"programID\"));\r",
											"\r",
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var batchId = pm.collectionVariables.get(\"batchId\");\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{batchId}}\", batchId);\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase(); \r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase(); \r",
											"\r",
											"pm.variables.set('statusCode',pm.iterationData.get(\"StatusCode\"));\r",
											"pm.variables.set('statusMessage',pm.iterationData.get(\"StatusMessage\"));\r",
											"pm.variables.set(\"TestCase\",pm.iterationData.get(\"TestCase\"));\r",
											"\r",
											"var constructedUrl = baseUrl  + expectedApiEndpoint;\r",
											"\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {    \r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"\r",
											"\r",
											" \r",
											" var batchId=Number(actualUrl.substring(actualUrl.lastIndexOf(\"/\")+1));\r",
											" pm.variables.set('reqBatchId', batchId);\r",
											"if (isNaN(batchId)) {\r",
											"    console.log(\"BatchId is a valid number: \" + batchId);\r",
											"    pm.execution.skipRequest();\r",
											"} \r",
											" else if(batchName==null || batchName.length==0 ||!batchNameRegExp.test(batchName)){   \r",
											"    console.log(\"batchName must begin with letter and can have letters,numbers and sometimes hyphens\"); \r",
											"    pm.execution.skipRequest();\r",
											" }\r",
											" else if(batchNoOfClasses<=0 || batchNoOfClasses>99)\r",
											" {\r",
											"    console.log(\"No of classes must be within 1 to 99\")\r",
											"    pm.execution.skipRequest();\r",
											" }\r",
											" else  if(!(batchStatus.toUpperCase() === \"ACTIVE\" || batchStatus.toUpperCase() === \"INACTIVE\"))\r",
											" {\r",
											"    console.log(\"BatchStatus must be either Active/Inactive\")\r",
											"    pm.execution.skipRequest();\r",
											" }\r",
											"else if(! typeof batchProgramId === \"number\" || isNaN(batchProgramId))\r",
											"{\r",
											"    console.log(\"Batch Program Id must be a number\")\r",
											"    pm.execution.skipRequest();\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonResponse = pm.response.json();\r",
											"let jsonRequest = JSON.parse(pm.request.body.raw); \r",
											"\r",
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));  \r",
											"    pm.collectionVariables.set(\"batchname\", jsonResponse.batchName);\r",
											"    pm.collectionVariables.set(\"programId\",jsonResponse.programId);\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Response Time : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(`Batch Id must match with the request : ${pm.variables.get(\"TestCase\")}`, function() {    \r",
											"   var requestBatchId = pm.variables.get('reqBatchId');  \r",
											"    pm.expect(jsonResponse.batchId).to.eql(requestBatchId);  \r",
											"});\r",
											"pm.test(`Check if batchName is present and matches the pattern : ${pm.variables.get(\"TestCase\")}`, function () { \r",
											"    const batchNamePattern = /^[a-zA-Z][a-zA-Z0-9-]+$/;    \r",
											"    pm.expect(jsonResponse.batchName).to.not.be.empty; \r",
											"    pm.expect(jsonResponse.batchName).to.match(batchNamePattern);\r",
											"});\r",
											"pm.test(`Check batchNoOfClasses is between 1 and 99 : ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"    pm.expect(jsonResponse).to.have.property(\"batchNoOfClasses\").to.be.above(0).to.be.below(99);\r",
											"});\r",
											"\r",
											"pm.test(`Check batchStatus is Active or Inactive : ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"    pm.expect(jsonResponse).to.have.property(\"batchStatus\").to.be.oneOf([\"Active\", \"Inactive\",\"ACTIVE\", \"INACTIVE\"]);\r",
											"});\r",
											"\r",
											"pm.test(`Check programId is present and it is a valid number: ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"    pm.expect(jsonResponse).to.have.property(\"programId\").to.be.a(\"number\").and.not.NaN;\r",
											"  \r",
											"});\r",
											"pm.test(`Batch Program Name is Present: ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"    pm.expect(jsonResponse).to.have.property(\"programName\");\r",
											"    pm.expect(typeof jsonResponse.programName).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"batchName\": \"{{batchName}}\",\r\n    \"batchDescription\": \"{{batchDescription}}\",\r\n    \"batchStatus\": \"{{batchStatus}}\",\r\n    \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n    \"programId\": \"{{programId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/batches/{{batchId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User by UserId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{\r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint =pm.iterationData.get(\"EndPoint\")+pm.collectionVariables.get(\"userId\");\r",
											"\r",
											"    var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"    var constructedUrl=baseUrl+ apiEndpoint;\r",
											"\r",
											"    console.log(constructedUrl);\r",
											"    console.log(actualUrl);\r",
											"\r",
											"    if (constructedUrl == actualUrl)\r",
											"    {\r",
											"        var actualMethod = pm.request.method.toUpperCase();\r",
											"        var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"    \r",
											"        console.log(actualMethod);\r",
											"        console.log(expectedMethod);\r",
											"\r",
											"        if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"              \r",
											"        pm.variables.set('expectedStatusCode', pm.iterationData.get(\"StatusCode\"));\r",
											"        pm.variables.set('expectedStatusMessage', pm.iterationData.get(\"StatusMessage\"));\r",
											"        pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"            \r",
											"        /*pm.variables.set(\"userComments\", pm.iterationData.get(\"userComments\"));\r",
											"        pm.variables.set(\"userEduPg\", pm.iterationData.get(\"userEduPg\"));\r",
											"        pm.variables.set(\"userEduUg\", pm.iterationData.get(\"userEduUg\"));\r",
											"        pm.variables.set(\"userFirstName\", pm.iterationData.get(\"userFirstName\"));\r",
											"        pm.variables.set(\"userLastName\", pm.iterationData.get(\"userLastName\"));\r",
											"        pm.variables.set(\"userMiddleName\", pm.iterationData.get(\"userMiddleName\"));\r",
											"        pm.variables.set(\"userLoginEmail\", pm.iterationData.get(\"userLoginEmail\"));\r",
											"        pm.variables.set(\"userLinkedinUrl\", pm.iterationData.get(\"userLinkedinUrl\"));\r",
											"        pm.variables.set(\"userLocation\", pm.iterationData.get(\"userLocation\"));\r",
											"*/\r",
											"        var countryCode = \"+91\";\r",
											"        pm.variables.set(\"userPhoneNumber\", countryCode + ' ' +pm.iterationData.get(\"userPhoneNumber\"));\r",
											"        pm.variables.set(\"userLinkedUrl\", pm.iterationData.get(\"userLinkedUrl\"));\r",
											"  \r",
											"        console.log(pm.variables.get(\"userFirstName\"));\r",
											"        console.log(pm.variables.get(\"userFirstName\"));\r",
											"        console.log(pm.variables.get(\"userLastName\"));\r",
											"        console.log(pm.variables.get(\"userPhoneNumber\"));\r",
											"        console.log(pm.variables.get(\"userVisaStatus\"));\r",
											"        console.log(pm.variables.get(\"userTimeZone\"));\r",
											"        console.log(pm.variables.get(\"userLinkedUrl\"));\r",
											"\r",
											"     /*   pm.variables.set(\"userTimeZone\", pm.iterationData.get(\"userTimeZone\"));       \r",
											"        pm.variables.set(\"userVisaStatus\", pm.iterationData.get(\"userVisaStatus\"));\r",
											"      \r",
											"        }\r",
											"\r",
											"        if (!pm.variables.get(\"userFirstName\") || \r",
											"            !pm.variables.get(\"userLastName\") || \r",
											"            !pm.variables.get(\"userPhoneNumber\") || \r",
											"            !pm.variables.get(\"userVisaStatus\") || \r",
											"            !pm.variables.get(\"userTimeZone\")) {\r",
											"            throw new Error(\"Mandatory fields are missing. Please provide userFirstName, userLastName, userPhoneNumber, userVisaStatus, and userTimeZone.\");\r",
											"        }\r",
											"        console.log(\"All mandatory fields are present. Ready to send the PUT request.\");*/\r",
											"        }\r",
											"    }else\r",
											"    {\r",
											"            pm.execution.skipRequest();\r",
											"    }\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",  () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body Structure and Data Types\", function () {\r",
											"    let response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"userComments\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userEduPg\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userEduUg\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userFirstName\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userId\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userLastName\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userLinkedinUrl\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userLocation\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userMiddleName\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userPhoneNumber\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userTimeZone\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userVisaStatus\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Specific Response Data Values\", function () {\r",
											"    let response = pm.response.json();\r",
											"   // pm.expect(response.userFirstName).to.eql(pm.variables.get(\"userFirstName\"));\r",
											"   // pm.expect(response.userPhoneNumber).to.eql(pm.variables.get(\"userPhoneNumber\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\", \r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateClassById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains batchId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNo\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDate\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classTopic\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classTopic\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStatus\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStatus\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStaffId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStaffId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDescription\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDescription\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classComments\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classComments\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNotes\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNotes\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains batchName\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classScheduledDates\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classScheduledDates\");\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"var ClassId = pm.collectionVariables.get(\"ClassId\") || \"\"; // Get userId if set\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{ClassId}}\", ClassId);\r",
											"\r",
											"var constructedUrl=baseUrl + expectedApiEndpoint;\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"batchId\":\"{{batchId}}\",\r\n\"classNo\": 1,\r\n\"classDate\": \"{{classDate}}\",\r\n\"classTopic\": \"{{classTopic}}\",\r\n\"classStatus\": \"{{classStatus}}\",\r\n\"classStaffId\": \"{{classStaffId}}\",\r\n\"classDescription\": \"{{classDescription}}\",\r\n\"classComments\": \"{{classComments}}\",\r\n\"classNotes\": \"{{classNotes}}\",\r\n\"classRecordingPath\": \"{{classRecordingPath}}\",\r\n\"classScheduledDates\": [\r\n\"{{classScheduleDates}}\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/{{ClassId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"{{ClassId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getBatchByProgramId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var programId = pm.collectionVariables.get(\"programId\");\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{programId}}\", programId);\r",
											"\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase(); \r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase(); \r",
											"\r",
											"pm.variables.set('statusCode',pm.iterationData.get(\"StatusCode\"));\r",
											"pm.variables.set('statusMessage',pm.iterationData.get(\"StatusMessage\"));\r",
											"pm.variables.set(\"TestCase\",pm.iterationData.get(\"TestCase\"));\r",
											"\r",
											"var constructedUrl = baseUrl  + expectedApiEndpoint;\r",
											"\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {    \r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"var programId=Number(actualUrl.substring(actualUrl.lastIndexOf(\"/\")+1));\r",
											"pm.variables.set('reqProgramId', programId);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse=pm.response.json();\r",
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Response Time  ${pm.response.responseTime} : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(`Response is an array : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(jsonResponse).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(`Valid batches are Present: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    jsonResponse.forEach(batch => {\r",
											"        var requestProgramId= pm.variables.get('reqProgramId');     \r",
											"        pm.expect(batch).to.have.property(\"programId\").to.eql(requestProgramId);\r",
											"        pm.expect(batch).to.have.property(\"batchId\").to.be.a(\"number\").and.not.NaN;\r",
											"        pm.expect(batch).to.have.property(\"batchNoOfClasses\").to.be.above(0).to.be.below(99);\r",
											"        pm.expect(batch).to.have.property(\"batchStatus\").to.be.oneOf([\"Active\", \"Inactive\",\"ACTIVE\", \"INACTIVE\"]);\r",
											"        pm.expect(batch).to.have.property(\"programName\")\r",
											"        pm.expect(typeof batch.programName).to.eql('string');\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/program/{{programId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"program",
										"{{programId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by ProgramName [Put Operation] DD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*console.log(pm.iterationData && Object.keys(pm.iterationData.toObject()).length);\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0)\r",
											"{*/\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var programName = pm.collectionVariables.get(\"programName\") || \"\"; \r",
											"var apiEndpoint=pm.iterationData.get(\"EndPoint\");\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{programName}}\", programName);\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var TestCase=pm.iterationData.get(\"TestCase\");\r",
											"var expectedStatusCode=pm.iterationData.get(\"StatusCode\");\r",
											"var expectedStatusMessage=pm.iterationData.get(\"StatusMessage\");\r",
											"\r",
											"var constructedUrl=baseUrl+ expectedApiEndpoint;\r",
											"console.log(constructedUrl);\r",
											"console.log(actualUrl);\r",
											"console.log(actualMethod);\r",
											"console.log(expectedMethod);\r",
											"console.log(TestCase);\r",
											"console.log(expectedStatusCode);\r",
											"console.log(expectedStatusMessage);\r",
											"if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"{\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else\r",
											"{\r",
											"pm.variables.set(\"programDescription\", pm.iterationData.get(\"programDescription\"));\r",
											"pm.variables.set(\"programName\", pm.iterationData.get(\"programName\"));\r",
											"pm.variables.set(\"programStatus\", pm.iterationData.get(\"programStatus\"));\r",
											"\r",
											"//checking status code and testcase where data is getting from csv file//\r",
											"pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"expectedStatusCode\"));\r",
											"pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"expectedStatusMessage\"));\r",
											"\r",
											"}\r",
											"\r",
											"if (!pm.variables.get(\"programName\") || !pm.variables.get(\"programStatus\")) {\r",
											"    throw new Error(\"Mandatory fields `programName` or `programStatus` are missing from data file.\");\r",
											"}\r",
											"console.log(\"Pre-request script executed successfully. Ready to send the request.\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*\r",
											"pm.test(\"Status code is 201\",  () => {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});*/\r",
											"console.log(pm.variables.get(\"TestCase\"));\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.responseTime.to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.code.to.be.oneOf([200, 201]);\r",
											"});\r",
											"pm.test(\"Validate Response Body Structure and Data Types\", function () {\r",
											"    let response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"programName\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"programStatus\").that.is.a(\"string\");\r",
											"    \r",
											"});\r",
											"pm.test(\"Validate Specific Response Data Values\", function () {\r",
											"    let response = pm.response.json();\r",
											"    pm.expect(response.programName).to.eql(pm.variables.get(\"programName\"));\r",
											"    pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
											"    //pm.expect(response.userFirstName).to.eql(\"{{userFirstName}}\");\r",
											"    \r",
											"});\r",
											"var responseData = pm.response.json();\r",
											"  var programName = responseData.programName;\r",
											"\r",
											"  console.log('programName'+programName);\r",
											" pm.collectionVariables.set(\"programName\",programName);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"{{programDescription}}\",\r\n\"programName\": \"{{programName}}\",\r\n\"programStatus\": \"{{programStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/program/{{programName}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"program",
										"{{programName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PutUserRoleId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();",
											"var actualMethod = pm.request.method.toUpperCase();",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();",
											"var userId = pm.collectionVariables.get(\"userId\") || \"\"; ",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{userId}}\", userId);",
											"var constructedUrl=baseUrl + expectedApiEndpoint;",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {",
											"     pm.execution.skipRequest();",
											"}",
											"else{",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));",
											"});",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userRoleList\": [\n    {\n      \"roleId\": \"{{upadteRoleId}}\",\n      \"userRoleStatus\": \"{{updateuserRoleStatus}}\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleId/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleId",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update roleProgramBatchStatus by userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Validate response structure and values\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"\r",
											"    console.log(\"Response JSON:\", responseJson);\r",
											"    var userid = pm.collectionVariables.get(\"userId\");\r",
											"    pm.expect(responseJson).to.have.property(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"success\").that.is.a(\"boolean\");\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"User \"+userid+\" has been successfully assigned to Program/Batch(es)\");\r",
											"    pm.expect(responseJson.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.iterationData && Object.keys(pm.iterationData.toObject()).length);\r",
											"\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{\r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint= pm.iterationData.get(\"EndPoint\")+pm.collectionVariables.get(\"userId\"); \r",
											"    var actualUrl = pm.variables.replaceIn(pm.request.url).toString();\r",
											"    var constructedUrl=baseUrl+ apiEndpoint;\r",
											"\r",
											"    console.log(constructedUrl);\r",
											"    console.log(actualUrl);\r",
											"\r",
											"    if (constructedUrl == actualUrl)\r",
											"    {\r",
											"    var actualMethod = pm.request.method.toUpperCase();\r",
											"    var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"    console.log(actualMethod);\r",
											"    console.log(expectedMethod);\r",
											"\r",
											"    if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"    {\r",
											"        pm.execution.skipRequest();\r",
											"    }\r",
											"    else\r",
											"    {   \r",
											"   \r",
											"        pm.variables.set(\"programId\", pm.collectionVariables.get(\"programId\"));\r",
											"        pm.variables.set(\"roleId\", pm.collectionVariables.get(\"roleId\"));\r",
											"        pm.variables.set(\"userId\", pm.collectionVariables.get(\"userId\"));\r",
											"   \r",
											"        let userRoleProgramBatchStatus = pm.iterationData.get(\"userRoleProgramBatchStatus\");  \r",
											"        \r",
											"        pm.variables.set(\"userRoleProgramBatchStatus\", userRoleProgramBatchStatus);\r",
											"\r",
											"        pm.variables.set('statusCode', pm.iterationData.get(\"statusCode\"));\r",
											"        pm.variables.set('statusMessage', pm.iterationData.get(\"statusMessage\"));\r",
											"        pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"        \r",
											"        console.log(\"User Role Program Batch Status:\", userRoleProgramBatchStatus);\r",
											"\r",
											"        pm.variables.set('statusCode', pm.iterationData.get(\"statusCode\"));\r",
											"        pm.variables.set('statusMessage', pm.iterationData.get(\"statusMessage\"));\r",
											"        pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"\r",
											"         if (!pm.collectionVariables.get(\"programId\") || \r",
											"        !pm.collectionVariables.get(\"roleId\") || \r",
											"        !pm.collectionVariables.get(\"userId\") || \r",
											"        !pm.collectionVariables.get(\"batchId\") || \r",
											"        !pm.variables.get(\"userRoleProgramBatchStatus\")) {    \r",
											"        throw new Error(\"Mandatory fields are missing from the data file. Please check your input.\");\r",
											"    }\r",
											"    }\r",
											"    \r",
											"    } \r",
											"     else\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"\r",
											"console.log(\"Pre-request script executed successfully. Ready to send the request.\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"programId\":{{programId}},\r\n \"roleId\":\"{{roleId}}\",\r\n \"userId\":\"{{userId}}\",\r\n \"userRoleProgramBatches\": [\r\n {\r\n \"batchId\":{{batchId}},\r\n \"userRoleProgramBatchStatus\":\r\n \"{{userRoleProgramBatchStatus}}\"\r\n }\r\n ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleProgramBatchStatus/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleProgramBatchStatus",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update userlogin status by userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify response\", () => {\r",
											"    const responseText = pm.response.text();\r",
											"   var userid = pm.collectionVariables.get(\"userId\"); \r",
											"    userid = String(userid);\r",
											"    pm.expect(responseText).to.include(\"UserLoginEmail/Status Updated for User: \"+userid);\r",
											"    pm.expect(responseText.includes(\"UserLoginEmail/Status Updated for User: \"+userid)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"//pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"//    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"//});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{\r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint=pm.iterationData.get(\"EndPoint\")+ pm.collectionVariables.get(\"userId\");\r",
											"\r",
											"    var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"    var constructedUrl=baseUrl + apiEndpoint;\r",
											"\r",
											"    console.log(constructedUrl);\r",
											"    console.log(actualUrl);\r",
											"    if (constructedUrl == actualUrl)\r",
											"    {\r",
											"        var actualMethod = pm.request.method.toUpperCase();\r",
											"        var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"        console.log(actualMethod);\r",
											"        console.log(expectedMethod);\r",
											"\r",
											"        if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            let status = pm.iterationData.get(\"status\");\r",
											"            let userLoginEmail = pm.iterationData.get(\"userLoginEmail\");\r",
											"            let loginstatus = pm.iterationData.get(\"loginstatus\");   \r",
											"            let chkroleid =pm.collectionVariables.get(\"roleId\");\r",
											"\r",
											"            pm.variables.set(\"status\", status);\r",
											"            pm.variables.set(\"userLoginEmail\", userLoginEmail);\r",
											"            pm.variables.set(\"loginstatus\", loginstatus);  \r",
											"            pm.variables.set(\"roleId\", chkroleid);    \r",
											"             \r",
											"            \r",
											"            console.log(\"Status:\", status);\r",
											"            console.log(\"User Login Email:\", userLoginEmail);\r",
											"            console.log(\"User Login status:\", loginstatus);\r",
											"\r",
											"            pm.variables.set('statusCode', pm.iterationData.get(\"statusCode\"));\r",
											"            pm.variables.set('statusMessage', pm.iterationData.get(\"statusMessage\"));\r",
											"            pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"        }    \r",
											"        /*if (!pm.variables.get(\"status\") || !pm.variables.get(\"userLoginEmail\")||!pm.variables.get(\"loginstatus\"))\r",
											"        {\r",
											"            throw new Error(\"Mandatory fields `status` or `userLoginEmail` are missing from data file.\");\r",
											"        }*/\r",
											"        console.log(\"Pre-request script executed successfully. Ready to send the request.\");\r",
											"    }\r",
											"     else\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"loginStatus\":\"{{loginstatus}}\",\r\n //\"password\":\"Happy\",\r\n //\"message\": \"JSON parse error: Unrecognized field \\\"password\\\" (class com.numpyninja.lms.dto.UserLoginDto), not marked as ignorable\",  \r\n //raise bug in jira  \r\n \"roleIds\": [\r\n \"{{roleId}}\"\r\n ],\r\n \"status\":\"{{status}}\",\r\n\"userLoginEmail\":\"{{userLoginEmail}}\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/userLogin/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"userLogin",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateClassRecorPath",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains batchId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNo\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDate\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classTopic\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classTopic\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStatus\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStatus\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStaffId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStaffId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDescription\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDescription\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classComments\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classComments\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNotes\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNotes\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains batchName\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classScheduledDates\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classScheduledDates\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"var ClassId = pm.collectionVariables.get(\"ClassId\") || \"\"; // Get userId if set\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{ClassId}}\", ClassId);\r",
											"\r",
											"var constructedUrl=baseUrl + expectedApiEndpoint;\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"classRecordingPath\":\"{{classRecordingPath}}\",\r\n\"csId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClassrecording/{{ClassId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClassrecording",
										"{{ClassId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by roleId V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",  () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											" pm.variables.set(\"roleId\", pm.collectionVariables.get(\"roleId\"));\r",
											"\r",
											" //console.log(\"roleId : \"+pm.collectionVariables.get(\"roleId\"));\r",
											"    console.log(\"post script values for: /v2/users\");\r",
											"    console.log(\"POST: statusCode from variable: \"+pm.variables.get(\"expectedStatusCode\"));\r",
											"    console.log(\"POST: StatusMessage from variable: \"+pm.variables.get(\"expectedStatusMessage\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{\r",
											"   \r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint =pm.iterationData.get(\"EndPoint\");\r",
											"\r",
											"    var actualUrl = pm.variables.replaceIn(pm.request.url).toString();\r",
											"    var constructedUrl = baseUrl+ apiEndpoint;\r",
											"\r",
											"        if(actualUrl==constructedUrl)\r",
											"        {\r",
											"            var actualMethod = pm.request.method.toUpperCase();\r",
											"            var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"            if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"                {\r",
											"                    pm.execution.skipRequest();\r",
											"                }\r",
											"                else\r",
											"                {              \r",
											"                    pm.variables.set('expectedStatusCode', pm.iterationData.get(\"StatusCode\"));\r",
											"                    pm.variables.set('expectedStatusMessage', pm.iterationData.get(\"StatusMessage\"));\r",
											"                    pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"                    console.log(\"Pre-request script executed successfully. Values set.\");\r",
											"\r",
											"                   /* console.log(\"pre script values for: /v2/users\");\r",
											"                    console.log(\"statusCode from variable: \"+pm.variables.get(\"expectedStatusCode\") +\" statusCode from CSV:  \"+pm.iterationData.get(\"StatusCode\"));\r",
											"                    console.log(\"StatusMessage from variable: \"+pm.variables.get(\"expectedStatusMessage\") +\" statusMessage from CSV:  \"+pm.iterationData.get(\"StatusMessage\"));*/\r",
											"                }\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"    \r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"facets\":{\r\n \"facetedFields\": [\r\n {\r\n \"displayName\":\"{{displayName}}\",\r\n \"filterValues\": [\r\n {\r\n \"count\":\"{{count}}\",\r\n \"name\":\"{{name}}\"\r\n }\r\n ]\r\n }\r\n ]\r\n },\r\n \"users\": [\r\n {\r\n \"userComments\":\"{{userComments}}\",\r\n \"userEduPg\":\"{{userEduPg}}\",\r\n \"userEduUg\":\"{{userEduUg}}\",\r\n \"userFirstName\":\"{{userFirstName}}\",\r\n \"userId\":\"{{userId}}\",\r\n \"userLastName\":\"{{userLastName}}\",\r\n \"userLinkedinUrl\":\"{{userLinkedinUrl}}\",\r\n \"userLocation\":\"{{userLocation}}\",\r\n \"userLoginEmail\":\"{{userLoginEmail}}\",\r\n \"userMiddleName\":\"{{userMiddleName}}\",\r\n \"userPhoneNumber\":{{userPhoneNumber}},\r\n \"userTimeZone\":\"{{userTimeZone}}\",\r\n \"userVisaStatus\":\"{{userVisaStatus}}\"\r\n }\r\n ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/v2/users",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by roleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"   /* console.log(\"post script values for: /users/roles/\");\r",
											"    console.log(\"POST: statusCode from variable: \"+pm.variables.get(\"expectedStatusCode\"));\r",
											"    console.log(\"POST: StatusMessage from variable: \"+pm.variables.get(\"expectedStatusMessage\"));*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{    \r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint =pm.iterationData.get(\"EndPoint\")+pm.collectionVariables.get(\"roleId\");\r",
											"\r",
											"    var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"    var constructedUrl=baseUrl+ apiEndpoint;\r",
											"\r",
											"    //console.log(\"constructedUrl for roleId:   \"+constructedUrl);\r",
											"    //console.log(\"actual Url for roleId:   \"+actualUrl);\r",
											"\r",
											"        if(actualUrl==constructedUrl)\r",
											"            {\r",
											"            var actualMethod = pm.request.method.toUpperCase();\r",
											"            var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();            \r",
											"\r",
											"                if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"                    {\r",
											"                        pm.execution.skipRequest();\r",
											"                    }\r",
											"                    else\r",
											"                    {\r",
											"                        pm.variables.set('expectedStatusCode', pm.iterationData.get(\"StatusCode\"));\r",
											"                        pm.variables.set('expectedStatusMessage', pm.iterationData.get(\"StatusMessage\"));\r",
											"                        pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"\r",
											"                        console.log(\"pre script values for: /users/roles/\");\r",
											"                           console.log(\"statusCode from variable: \"+pm.variables.get(\"expectedStatusCode\") +\" statusCode from CSV:  \"+pm.iterationData.get(\"StatusCode\"));\r",
											"                console.log(\"StatusMessage from variable: \"+pm.variables.get(\"expectedStatusMessage\") +\" statusMessage from CSV:  \"+pm.iterationData.get(\"StatusMessage\"));\r",
											"                        \r",
											"                    }\r",
											"            }\r",
											"            else{\r",
											"                 pm.execution.skipRequest();\r",
											"            }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roles/{{roleId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roles",
										"{{roleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users batchId by userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",  () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(pm.iterationData && Object.keys(pm.iterationData.toObject()).length);\r",
											"\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{\r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint = pm.iterationData.get(\"EndPoint\") + pm.collectionVariables.get(\"userId\");\r",
											"\r",
											"    var actualUrl = pm.variables.replaceIn(pm.request.url).toString();\r",
											"    var constructedUrl = baseUrl+ apiEndpoint;\r",
											"    \r",
											"    console.log(constructedUrl);\r",
											"    console.log(actualUrl);\r",
											"\r",
											"        if(actualUrl == constructedUrl)\r",
											"        {\r",
											"            var actualMethod = pm.request.method.toUpperCase();\r",
											"            var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"            \r",
											"            console.log(actualMethod);\r",
											"            console.log(expectedMethod);\r",
											"\r",
											"            if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"            {\r",
											"                pm.execution.skipRequest();\r",
											"            }\r",
											"            else{\r",
											"                pm.variables.set('expectedStatusCode', pm.iterationData.get(\"StatusCode\"));\r",
											"                pm.variables.set('expectedStatusMessage', pm.iterationData.get(\"StatusMessage\"));\r",
											"                pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"            }\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/user/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get programs by batchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"/*pm.test(\"Response is an array with one element\", function () {\r",
											"    const responseJson = pm.response.json(); \r",
											"    pm.expect(responseJson).to.be.an(\"array\");\r",
											"    pm.expect(responseJson.length).to.eql(1);\r",
											"});*/\r",
											"pm.test(\"Validate response structure and data types\", function () {\r",
											"    const responseJson = pm.response.json(); \r",
											"    //if (Array.isArray(responseJson) && responseJson.length === 1) {      \r",
											"\r",
											"   // pm.expect(responseJson).to.be.an(\"array\").with.lengthOf(1);\r",
											"    const user = responseJson[0];\r",
											"    console.log(user);\r",
											"   \r",
											"    pm.expect(user).to.have.property(\"userId\").that.is.a(\"string\");\r",
											"    pm.expect(user.userId).to.eql(pm.variables.get(\"userId\"));\r",
											"    pm.expect(user).to.have.property(\"userFirstName\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userLastName\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userMiddleName\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userPhoneNumber\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userLocation\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userTimeZone\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userLinkedinUrl\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userEduUg\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userEduPg\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userComments\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userVisaStatus\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userLoginEmail\").that.is.null; // Ensure it is null\r",
											"    // }else {\r",
											"    //console.error(\"Unexpected response format\");\r",
											"     //}\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body\", function () {\r",
											"const responseJson = pm.response.json();\r",
											"   if (Array.isArray(responseJson) && responseJson.length === 1) {      \r",
											"\r",
											"    pm.expect(responseJson).to.be.an(\"array\").with.lengthOf(1);\r",
											"    const user = responseJson[0];\r",
											"    console.log(user);\r",
											"\r",
											"console.log(\"Response userId:\", responseJson[0].userId);\r",
											"console.log(\"Expected userId:\", pm.variables.get(\"userId\"));\r",
											"\r",
											"pm.expect(responseJson[0].userId).to.eql(pm.variables.get(\"userId\"));\r",
											"pm.expect(responseJson[0].userFirstName).to.eql(pm.variables.get(\"userFirstName\"));\r",
											"pm.expect(responseJson[0].userLastName).to.eql(pm.variables.get(\"userLastName\"));\r",
											"pm.expect(responseJson[0].userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));\r",
											"pm.expect(responseJson[0].userPhoneNumber).to.eql(pm.variables.get(\"userPhoneNumber\"));\r",
											"pm.expect(responseJson[0].userLocation).to.eql(pm.variables.get(\"userLocation\"));\r",
											"pm.expect(responseJson[0].userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));\r",
											"pm.expect(responseJson[0].userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));\r",
											"pm.expect(responseJson[0].userEduUg).to.eql(pm.variables.get(\"userEduUg\"));\r",
											"pm.expect(responseJson[0].userEduPg).to.eql(pm.variables.get(\"userEduPg\"));\r",
											"pm.expect(responseJson[0].userComments).to.eql(pm.variables.get(\"userComments\"));\r",
											"pm.expect(responseJson[0].userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));\r",
											"\r",
											"pm.expect(user.userLoginEmail).to.be.null; // Checks if the value is null\r",
											"   }else {\r",
											"    console.error(\"Unexpected response format\");\r",
											"   }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{\r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint = pm.iterationData.get(\"EndPoint\") + pm.collectionVariables.get(\"batchId\");\r",
											"\r",
											"    var actualUrl = pm.variables.replaceIn(pm.request.url).toString();\r",
											"    var constructedUrl = baseUrl + apiEndpoint;\r",
											"    \r",
											"    console.log(\"Programe Batch constructedUrl: \"+constructedUrl);\r",
											"    console.log(\"ProgrameBatch actualUrl: \"+actualUrl);\r",
											"\r",
											"    if(actualUrl.toUpperCase() == constructedUrl.toUpperCase())\r",
											"    {\r",
											"        var actualMethod = pm.request.method.toUpperCase();\r",
											"        var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"    \r",
											"        if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"        else{\r",
											"            pm.variables.set('expectedStatusCode', pm.iterationData.get(\"StatusCode\"));\r",
											"            pm.variables.set('expectedStatusMessage', pm.iterationData.get(\"StatusMessage\"));\r",
											"            pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"        }\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"         pm.execution.skipRequest();\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/programBatch/{{batchId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"programBatch",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users for program by programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"pm.test(\"Validate response structure and data types\", function () {\r",
											"     const responseJson = pm.response.json(); \r",
											"   if (Array.isArray(responseJson) && responseJson.length === 1) {      \r",
											"\r",
											"    pm.expect(responseJson).to.be.an(\"array\").with.lengthOf(1);\r",
											"    const user = responseJson[0];\r",
											"    console.log(user); \r",
											"\r",
											"    pm.expect(user).to.have.property(\"userId\").that.is.a(\"string\");\r",
											"    pm.expect(user.userId).to.eql(pm.variables.get(\"userId\"));\r",
											"    pm.expect(user).to.have.property(\"userFirstName\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userLastName\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userMiddleName\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userPhoneNumber\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userLocation\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userTimeZone\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userLinkedinUrl\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userEduUg\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userEduPg\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userComments\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userVisaStatus\").that.is.a(\"string\");\r",
											"    pm.expect(user).to.have.property(\"userLoginEmail\").that.is.null; \r",
											"    }\r",
											"    else{\r",
											"         console.error(\"Unexpected response format\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Validate response body\", function () {\r",
											"\r",
											"    const responseJson = pm.response.json(); \r",
											"    if (Array.isArray(responseJson) && responseJson.length === 1) {      \r",
											"\r",
											"    pm.expect(responseJson).to.be.an(\"array\").with.lengthOf(1);\r",
											"    const user = responseJson[0];\r",
											"    console.log(user); \r",
											"\r",
											"console.log(\"Response userId:\", responseJson[0].userId);\r",
											"console.log(\"Expected userId:\", pm.variables.get(\"userId\"));\r",
											"\r",
											"pm.expect(responseJson[0].userId).to.eql(pm.variables.get(\"userId\"));\r",
											"pm.expect(responseJson[0].userFirstName).to.eql(pm.variables.get(\"userFirstName\"));\r",
											"pm.expect(responseJson[0].userLastName).to.eql(pm.variables.get(\"userLastName\"));\r",
											"pm.expect(responseJson[0].userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));\r",
											"pm.expect(responseJson[0].userPhoneNumber).to.eql(pm.variables.get(\"userPhoneNumber\"));\r",
											"pm.expect(responseJson[0].userLocation).to.eql(pm.variables.get(\"userLocation\"));\r",
											"pm.expect(responseJson[0].userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));\r",
											"pm.expect(responseJson[0].userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));\r",
											"pm.expect(responseJson[0].userEduUg).to.eql(pm.variables.get(\"userEduUg\"));\r",
											"pm.expect(responseJson[0].userEduPg).to.eql(pm.variables.get(\"userEduPg\"));\r",
											"pm.expect(responseJson[0].userComments).to.eql(pm.variables.get(\"userComments\"));\r",
											"pm.expect(responseJson[0].userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));\r",
											"pm.expect(user.userLoginEmail).to.be.null; // Checks if the value is null\r",
											"    }  else{\r",
											"         console.error(\"Unexpected response format\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{\r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint =pm.iterationData.get(\"EndPoint\")+pm.collectionVariables.get(\"programId\");\r",
											"\r",
											"    var constructedUrl=baseUrl+ apiEndpoint;\r",
											"    var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"\r",
											"    console.log(\"constructedUrl : \"+constructedUrl);\r",
											"    console.log(\"actualUrl: \"+actualUrl);\r",
											"    \r",
											"    if(actualUrl == constructedUrl)\r",
											"        {\r",
											"            var actualMethod = pm.request.method.toUpperCase();\r",
											"            var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"            console.log(actualMethod);\r",
											"            console.log(expectedMethod);\r",
											"\r",
											"            if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"            {\r",
											"                pm.execution.skipRequest();\r",
											"            }\r",
											"            else{\r",
											"                pm.variables.set('expectedStatusCode', pm.iterationData.get(\"StatusCode\"));\r",
											"                pm.variables.set('expectedStatusMessage', pm.iterationData.get(\"StatusMessage\"));\r",
											"                pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"            }\r",
											"        }\r",
											"        else\r",
											"            {\r",
											"                pm.execution.skipRequest();\r",
											"            }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/programs/{{programId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"programs",
										"{{programId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all classes by StaffId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains batchId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNo\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDate\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classTopic\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classTopic\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStatus\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStatus\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStaffId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStaffId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDescription\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDescription\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classComments\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classComments\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNotes\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNotes\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains batchName\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classScheduledDates\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classScheduledDates\");\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"var StaffId = pm.collectionVariables.get(\"userId\") || \"\"; // Get userId if set\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{StaffId}}\", StaffId);\r",
											"\r",
											"console.log(\"StaffId :\"+ StaffId);\r",
											"\r",
											"var constructedUrl=baseUrl + expectedApiEndpoint;\r",
											"\r",
											"console.log(\"actualUrl :\"+ actualUrl);\r",
											"console.log(\"constructedUrl :\"+ constructedUrl);\r",
											"\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classesByStaff/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classesByStaff",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetallClassesByBatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains batchId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNo\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDate\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classTopic\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classTopic\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStatus\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStatus\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStaffId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStaffId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDescription\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDescription\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classComments\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classComments\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNotes\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNotes\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains batchName\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classScheduledDates\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classScheduledDates\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var BatchId = pm.collectionVariables.get(\"batchId\") || \"\"; // Get userId if set\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{BatchId}}\", BatchId);\r",
											"\r",
											"var constructedUrl=baseUrl + expectedApiEndpoint;\r",
											"console.log(\"actualUrl :\"+ actualUrl);\r",
											"console.log(\"constructedUrl :\"+ constructedUrl);\r",
											"\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"\r",
											"     \r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classesbyBatch/{{batchId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classesbyBatch",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetallUpcomingClassesForStudent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains batchId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNo\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDate\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classTopic\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classTopic\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStatus\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStatus\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStaffId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStaffId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDescription\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDescription\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classComments\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classComments\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNotes\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNotes\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var StudentId = pm.collectionVariables.get(\"userId\") || \"\"; // Get userId if set\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{StudentId}}\", StudentId);\r",
											"\r",
											"var constructedUrl=baseUrl + expectedApiEndpoint;\r",
											"console.log(\"actualUrl :\"+ actualUrl);\r",
											"console.log(\"constructedUrl :\"+ constructedUrl);\r",
											"\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/upcomingClasses/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"upcomingClasses",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get class recording by ClassId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var ClassId = pm.collectionVariables.get(\"ClassId\") || \"\"; // Get userId if set\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{ClassId}}\", ClassId);\r",
											"\r",
											"var constructedUrl=baseUrl + expectedApiEndpoint;\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classRecordings/{{ClassId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classRecordings",
										"{{ClassId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get class recordings by BatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"var BatchId = pm.collectionVariables.get(\"batchId\") || \"\"; // Get userId if set\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{BatchId}}\", BatchId);\r",
											"\r",
											"var constructedUrl=baseUrl + expectedApiEndpoint;\r",
											"\r",
											"console.log(\"actualUrl :\"+ actualUrl);\r",
											"console.log(\"constructedUrl :\"+ constructedUrl);\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batchRecordings/{{batchId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batchRecordings",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Programs [Get Operation] DD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*console.log(pm.iterationData && Object.keys(pm.iterationData.toObject()).length);\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0)\r",
											"{*/\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint=pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var TestCase=pm.iterationData.get(\"TestCase\");\r",
											"var expectedStatusCode=pm.iterationData.get(\"StatusCode\");\r",
											"var expectedStatusMessage=pm.iterationData.get(\"StatusMessage\");\r",
											"\r",
											"var constructedUrl=baseUrl+ apiEndpoint;\r",
											"\r",
											"if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"{\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else\r",
											"{\r",
											"\r",
											"//checking status code and testcase where data is getting from csv file//\r",
											"pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"expectedStatusCode\"));\r",
											"pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"expectedStatusMessage\"));\r",
											"\r",
											"}\r",
											"\r",
											"console.log(\"Pre-request script executed successfully.\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.log(pm.variables.get(\"TestCase\"));\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"//\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.responseTime.to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.code.to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/allPrograms",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"allPrograms"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Programs with Users [Get Operation] DD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*console.log(pm.iterationData && Object.keys(pm.iterationData.toObject()).length);\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0)\r",
											"{*/\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint=pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var TestCase=pm.iterationData.get(\"TestCase\");\r",
											"var expectedStatusCode=pm.iterationData.get(\"StatusCode\");\r",
											"var expectedStatusMessage=pm.iterationData.get(\"StatusMessage\");\r",
											"\r",
											"var constructedUrl=baseUrl+ apiEndpoint;\r",
											"\r",
											"if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"{\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else\r",
											"{\r",
											"\r",
											"//checking status code and testcase where data is getting from csv file//\r",
											"pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"expectedStatusCode\"));\r",
											"pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"expectedStatusMessage\"));\r",
											"\r",
											"}\r",
											"\r",
											"console.log(\"Pre-request script executed successfully.\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.log(pm.variables.get(\"TestCase\"));\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"//\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.responseTime.to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.code.to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/allProgramsWithUsers",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"allProgramsWithUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllBatches",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.collectionVariables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase(); \r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase(); \r",
											"\r",
											"pm.variables.set('statusCode',pm.iterationData.get(\"StatusCode\"));\r",
											"pm.variables.set('statusMessage',pm.iterationData.get(\"StatusMessage\"));\r",
											"pm.variables.set(\"TestCase\",pm.iterationData.get(\"TestCase\"));\r",
											"\r",
											"\r",
											"\r",
											"var constructedUrl = baseUrl  + apiEndpoint;\r",
											"\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {    \r",
											"     pm.execution.skipRequest();\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Response Time : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(`Check if batches array exists : ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"    pm.expect(jsonResponse ).to.be.an(\"array\");\r",
											"});\r",
											"pm.test(`Check each batch's properties : ${pm.variables.get(\"TestCase\")}`, function() {\r",
											"    jsonResponse.forEach(batch=> {\r",
											"        const batchNamePattern = /^[a-zA-Z][a-zA-Z0-9-]+$/; \r",
											"        pm.expect(jsonResponse.batchName).to.match(batchNamePattern); \r",
											"        pm.expect(batch.batchStatus).to.be.oneOf([\"Active\", \"Inactive\",\"ACTIVE\",\"INACTIVE\"]);\r",
											"        pm.expect(batch.programId).to.be.a(\"number\").and.not.NaN;\r",
											"        pm.expect(batch).to.have.property(\"batchNoOfClasses\").to.be.above(0).to.be.below(99);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllUsers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*const requestType = pm.iterationData.get('RequestType');",
											"const testOperation = pm.iterationData.get('Test Operation');",
											"",
											"if(requestType == \"Get\" && testOperation == \"Get All User\")",
											"{",
											"    pm.collectionVariables.set(\"GetAllActiveUser-EndPoint\", pm.iterationData.get(\"End Point\"));",
											"     pm.collectionVariables.set(\"expectedStatusCode\", pm.iterationData.get(\"Status Code\"));",
											"     pm.collectionVariables.set(\"expectedStatusMessage\", pm.iterationData.get(\"Status Message\"));",
											"      pm.collectionVariables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}",
											"else{",
											"    pm.execution.skipRequest();",
											"}*/",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();",
											"var actualMethod = pm.request.method.toUpperCase();",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();",
											"",
											"var constructedUrl=baseUrl + apiEndpoint;",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {",
											"     pm.execution.skipRequest();",
											"}",
											"else{",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {",
											"     pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));",
											"});",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllActiveUsers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*const requestType = pm.iterationData.get('RequestType');",
											"const testOperation = pm.iterationData.get('Test Operation');",
											"",
											"if(requestType == \"Get\" && testOperation == \"Get All Active User\")",
											"{",
											"    pm.collectionVariables.set(\"GetAllActiveUser-EndPoint\", pm.iterationData.get(\"End Point\"));",
											"     pm.collectionVariables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.collectionVariables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.collectionVariables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}",
											"else{",
											"    pm.execution.skipRequest();",
											"}*/",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();",
											"var actualMethod = pm.request.method.toUpperCase();",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();",
											"",
											"var constructedUrl=baseUrl + apiEndpoint;",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {",
											"     pm.execution.skipRequest();",
											"}",
											"else{",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(   `Status Code: ${pm.variables.get(\"TestCase\")}`, function () {",
											"     pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));",
											"});",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/activeUsers",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"activeUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetActiveEmailUsers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*const requestType = pm.iterationData.get('RequestType');",
											"const testOperation = pm.iterationData.get('Test Operation');",
											"",
											"if(requestType == \"Get\" && testOperation == \"Get All Active Email User\")",
											"{",
											"    pm.collectionVariables.set(\"GetAllActiveUser-EndPoint\", pm.iterationData.get(\"End Point\"));",
											"     pm.collectionVariables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.collectionVariables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.collectionVariables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}",
											"else{",
											"    pm.execution.skipRequest();",
											"}*/",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();",
											"var actualMethod = pm.request.method.toUpperCase();",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();",
											"var constructedUrl=baseUrl + apiEndpoint;",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {",
											"     pm.execution.skipRequest();",
											"}",
											"else{",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {",
											"     pm.response.to.have.status(pm.collectionVariables.get(\"expectedStatusCode\"));",
											"});",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/fetch-emails",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"fetch-emails"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllRoles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*const requestType = pm.iterationData.get('RequestType');",
											"const testOperation = pm.iterationData.get('Test Operation');",
											"",
											"if(requestType == \"Get\" && testOperation == \"Get All Roles\")",
											"{",
											"   ",
											"     pm.collectionVariables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.collectionVariables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.collectionVariables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}",
											"else{",
											"    pm.execution.skipRequest();",
											"}*/",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();",
											"var actualMethod = pm.request.method.toUpperCase();",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();",
											"var constructedUrl=baseUrl + apiEndpoint;",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {",
											"     pm.execution.skipRequest();",
											"}",
											"else{",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {",
											"     pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));",
											"});",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/roles",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAlluserswithroles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();",
											"var actualMethod = pm.request.method.toUpperCase();",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();",
											"var constructedUrl=baseUrl + apiEndpoint;",
											"console.log('actualUrl:' +actualUrl);",
											"console.log('constructedUrl :'+constructedUrl);",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {",
											"     pm.execution.skipRequest();",
											"}",
											"else{",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {",
											"     pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));",
											"});",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/roles",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserStatusCount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();",
											"var actualMethod = pm.request.method.toUpperCase();",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();",
											"var constructedUrl=baseUrl + apiEndpoint;",
											"console.log('actualUrl:' +actualUrl);",
											"console.log('constructedUrl :'+constructedUrl);",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {",
											"     pm.execution.skipRequest();",
											"}",
											"else{",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {",
											"     pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));",
											"});",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(`Response time: ${pm.collectionVariables.get(\"TestCase\")}`, function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/byStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"byStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains batchId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNo\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDate\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDate\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classTopic\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classTopic\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStatus\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStatus\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classStaffId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classStaffId\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classDescription\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classDescription\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classComments\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classComments\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classNotes\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classNotes\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains batchName\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"batchName\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains classScheduledDates\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classScheduledDates\");\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"console.log(baseUrl);\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"var constructedUrl=baseUrl + apiEndpoint;\r",
											"console.log(\"actualUrl: \"+ actualUrl);\r",
											"console.log(\"constructedUrl:\"+ constructedUrl);\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/allClasses",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"allClasses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all recordings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"Body contains csId\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"csId\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body contains classRecordingPath\",()=>{\r",
											"pm.expect(pm.response.text()).to.include(\"classRecordingPath\");\r",
											"});\r",
											"\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"var constructedUrl=baseUrl + apiEndpoint;\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classrecordings",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classrecordings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"//trying to delete same user - should show user already deleted message"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{\r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint =pm.iterationData.get(\"EndPoint\")+pm.collectionVariables.get(\"userId\");\r",
											"\r",
											"    var constructedUrl=baseUrl+ apiEndpoint;\r",
											"    var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"    \r",
											"    console.log(constructedUrl);\r",
											"    console.log(actualUrl);\r",
											"\r",
											"    if (constructedUrl == actualUrl )\r",
											"    {\r",
											"        var actualMethod = pm.request.method.toUpperCase();\r",
											"        var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"        console.log(actualMethod);\r",
											"        console.log(expectedMethod);\r",
											"\r",
											"        if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"        else{\r",
											"            pm.variables.set('statusCode', pm.iterationData.get(\"statusCode\"));\r",
											"            pm.variables.set('statusMessage', pm.iterationData.get(\"statusMessage\"));\r",
											"            pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"        }\r",
											"    }\r",
											"     else\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteBatchByBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var batchId = pm.collectionVariables.get(\"batchId\");\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{batchId}}\", batchId);\r",
											"\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase(); \r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase(); \r",
											"\r",
											"pm.variables.set('statusCode',pm.iterationData.get(\"StatusCode\"));\r",
											"pm.variables.set('statusMessage',pm.iterationData.get(\"StatusMessage\"));\r",
											"pm.variables.set(\"TestCase\",pm.iterationData.get(\"TestCase\"));\r",
											"\r",
											"var constructedUrl = baseUrl  + expectedApiEndpoint;\r",
											"\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {    \r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											" var batchId=Number(actualUrl.substring(actualUrl.lastIndexOf(\"/\")+1));\r",
											" pm.variables.set('reqBatchId', batchId);\r",
											"if (isNaN(batchId)) {\r",
											"    console.log(\"BatchId is a valid number: \" + batchId);\r",
											"    pm.execution.skipRequest();\r",
											"} \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));   \r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"// pm.test(\"Successful deletion message for deleting a batch\", function () {    \r",
											"//     var responseBody = pm.response.text(); \r",
											"//     pm.expect(responseBody).to.be.a('string').to.eql(`Message: Batch with Id-${pm.variables.get('reqBatchId')} deleted Successfully!`);  \r",
											"//     // pm.collectionVariables.unset(\"batchId\");\r",
											"//     // pm.collectionVariables.unset(\"batchname\");\r",
											"  \r",
											"// });\r",
											"\r",
											"pm.test(`Response Time : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/{{batchId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Program By ProgramID[Delete Operation] DD",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*console.log(pm.iterationData && Object.keys(pm.iterationData.toObject()).length);\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0)\r",
											"{*/\r",
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var programId = pm.collectionVariables.get(\"programId\") || \"\"; \r",
											"var apiEndpoint=pm.iterationData.get(\"EndPoint\");\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{programId}}\", programId);\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"var TestCase=pm.iterationData.get(\"TestCase\");\r",
											"var expectedStatusCode=pm.iterationData.get(\"StatusCode\");\r",
											"var expectedStatusMessage=pm.iterationData.get(\"StatusMessage\");\r",
											"\r",
											"var constructedUrl=baseUrl+ expectedApiEndpoint;\r",
											"\r",
											"if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"{\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else\r",
											"{\r",
											"\r",
											"//checking status code and testcase where data is getting from csv file//\r",
											"pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"expectedStatusCode\"));\r",
											"pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"expectedStatusMessage\"));\r",
											"\r",
											"}\r",
											"\r",
											"console.log(\"Pre-request script executed successfully.\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.log(pm.variables.get(\"TestCase\"));\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(`Status Code: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusCode\"));\r",
											"});\r",
											"\r",
											"//\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.responseTime.to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.code.to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/deletebyprogid/{{programId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deletebyprogid",
										"{{programId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Program By ProgramName[Delete Operation] DD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");",
											"var programName = pm.collectionVariables.get(\"programName\") || \"\";",
											"//pm.collectionVariables.set(\"programName\",programName) ",
											"var apiEndpoint=pm.iterationData.get(\"EndPoint\");",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{programName}}\", programName);",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();",
											"var actualMethod = pm.request.method.toUpperCase();",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();",
											"var TestCase=pm.iterationData.get(\"TestCase\");",
											"var expectedStatusCode=pm.iterationData.get(\"StatusCode\");",
											"var expectedStatusMessage=pm.iterationData.get(\"StatusMessage\");",
											"",
											"var constructedUrl=baseUrl+ expectedApiEndpoint;",
											"",
											"if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)",
											"{",
											"     pm.execution.skipRequest();",
											"}",
											"else",
											"{",
											"    pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));",
											"pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"expectedStatusCode\"));",
											"pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"expectedStatusMessage\"));}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/deletebyprogname/{{programName}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deletebyprogname",
										"{{programName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteByClassId Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"status text has OK\", function (){\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"if (pm.info.iteration === pm.info.iterationCount - 1) {\r",
											"    pm.collectionVariables.set(\"CurrentTestType\",\"Negative Testing\");\r",
											"    pm.execution.setNextRequest(\"29256354-5fa935b6-2db0-428d-b203-95a8d04ee02f\");\r",
											"    \r",
											"} else {\r",
											"    pm.execution.setNextRequest(null);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"var apiEndpoint = pm.iterationData.get(\"EndPoint\");\r",
											"var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"var actualMethod = pm.request.method.toUpperCase();\r",
											"var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"var ClassId = pm.collectionVariables.get(\"ClassId\") || \"\"; // Get userId if set\r",
											"var expectedApiEndpoint = apiEndpoint.replace(\"{{ClassId}}\", ClassId);\r",
											"\r",
											"var constructedUrl=baseUrl + expectedApiEndpoint;\r",
											" if (constructedUrl !== actualUrl || expectedMethod !== actualMethod) {\r",
											"     pm.execution.skipRequest();\r",
											"}\r",
											"else{\r",
											"    pm.variables.set(\"expectedStatusCode\", pm.iterationData.get(\"StatusCode\"));\r",
											"     pm.variables.set(\"expectedStatusMessage\", pm.iterationData.get(\"StatusMessage\"));\r",
											"      pm.variables.set(\"TestCase\", pm.iterationData.get(\"TestCase\"));\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/deleteByClass/{{ClassId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deleteByClass",
										"{{ClassId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Negative Testing",
			"item": [
				{
					"name": "UserLogin-Negative",
					"item": [
						{
							"name": "UserSignIndata",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',200);\r",
											"pm.variables.set('statusMessage','OK');\r",
											"pm.variables.set('TestCase', \" User SignIn\")\r",
											"\r",
											"\r",
											"var currentTestType = pm.collectionVariables.get(\"CurrentTestType\");\r",
											"if (currentTestType !== \"Negative Testing\") { \r",
											"pm.execution.setNextRequest(null);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();\r",
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Response Time : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(`Token is present : ${pm.variables.get('TestCase')}`, function () {  \r",
											"    pm.expect(jsonResponse).to.have.property('token').that.is.a('string').and.is.not.empty;  \r",
											"    pm.collectionVariables.set(\"authToken\", jsonResponse.token);\r",
											"});\r",
											"\r",
											"// pm.test(`Type of the tokenn is Bearer : ${pm.variables.get('TestCase')}`, function () {\r",
											"//     pm.expect(jsonResponse).to.have.property('type').that.is.a('string').and.is.not.empty;  \r",
											"//     pm.expect(jsonResponse.type).to.eql('Bearer'); \r",
											"\r",
											"// });\r",
											"// pm.test(`UserId status with U : : ${pm.variables.get('TestCase')}`, function () {\r",
											"//     pm.expect(jsonResponse).to.have.property('userId').that.is.a('string').and.is.not.empty;   \r",
											"//      pm.expect(jsonResponse.userId.startsWith(\"U\")).to.be.true;\r",
											"// });\r",
											"\r",
											"// pm.test(`Roles must be an Array and shoule have values of (ROLE_ADMIN, ROLE_STAFF, ROLE_STUDENT) : : ${pm.variables.get('TestCase')}`, function () {\r",
											"//   var allowedRoles = [\"ROLE_ADMIN\", \"ROLE_STAFF\", \"ROLE_STUDENT\"];\r",
											"//     pm.expect(jsonResponse).to.have.property('roles');\r",
											"//     pm.expect(jsonResponse.roles).to.be.an('array').that.is.not.empty;\r",
											"//     var validRoleFound = jsonResponse.roles.some(role => allowedRoles.includes(role));\r",
											"//     pm.expect(validRoleFound).to.be.true; \r",
											"// });\r",
											"\r",
											"// pm.test(`Status is Active/Inactive : ${pm.variables.get('TestCase')}`, function () {  \r",
											"//     pm.expect([\"Active\", \"Inactive\"]).to.include(jsonResponse.status);\r",
											"// });\r",
											"\r",
											"// pm.test(`Password Expired is false : ${pm.variables.get('TestCase')}`, function () {  \r",
											"//    pm.expect(jsonResponse).to.have.property('passwordExpired').to.eq(false);\r",
											"// });\r",
											"// pm.test(`UserEmailId in response matches with the request : ${pm.variables.get('TestCase')}`, function () {\r",
											"//     var responseUserEmail = jsonResponse.email;  \r",
											"//     var requestUserEmail = pm.variables.get(\"userEmailId\");\r",
											"//     pm.expect(responseUserEmail).to.eql(requestUserEmail);\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":\"March@2025\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/login",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "UserSignIndata",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":\"March@2025\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741738988&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=EO%2B1DBzs1f64XgzpeLjmliyiUjFlEnzODsoxG%2BqekK8%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741738988&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=EO%2B1DBzs1f64XgzpeLjmliyiUjFlEnzODsoxG%2BqekK8%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 00:23:08 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTczODk4OCwiZXhwIjoxNzQxNzY3Nzg4fQ.4pAmLua1pq89V6eL8jtq_qcuV7h40sMkmfLi1a8RIWwsXFUB9e-C7DNlKfmZoN72qwRrgVUC7PNO_9GJ89jjIQ\",\n    \"type\": \"Bearer\",\n    \"userId\": \"U175\",\n    \"email\": \"sdetorganizer@gmail.com\",\n    \"roles\": [\n        \"ROLE_ADMIN\",\n        \"ROLE_STAFF\"\n    ],\n    \"status\": \"Active\",\n    \"passwordExpired\": false\n}"
								}
							]
						},
						{
							"name": "ValidUrlWithInvalidEmailId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',401);\r",
											"pm.variables.set('statusMessage','Unauthorized');\r",
											"pm.variables.set('responseMessage','Bad credentials');\r",
											"pm.variables.set('TestCase', \" User SignIn - Valid url with invalid email id\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response contains  ${pm.variables.get('responseMessage')} message : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.jsonBody('message', pm.variables.get('responseMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmailId\": \"johh-Mathewgmail.com*&\",\r\n  \"password\":\"March@2025\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/login",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Bug-ValidUrlWithInvalidEmailIdCredential-expecting 401 unAuthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"johhMathew@gmail.com\",\r\n  \"password\":\"March@2025\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741787505&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=UD0m1Hi9v2K3%2Bpuzs6MQ4Fl49ZR0nU4WTyCWLUAzbrc%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741787505&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=UD0m1Hi9v2K3%2Bpuzs6MQ4Fl49ZR0nU4WTyCWLUAzbrc%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 13:51:45 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Active User with given email Id Not Found\",\n    \"success\": false\n}"
								},
								{
									"name": "Bug-ValidUrlWithInvalidEmailIdFormat-Message InvalidEmailFormat",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"johh-Mathewgmail.com*&\",\r\n  \"password\":\"March@2025\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741787591&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=53VaAq0VohTrm8wN7F7z2hLeHNQa1LR5rrOQAUjA2uM%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741787591&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=53VaAq0VohTrm8wN7F7z2hLeHNQa1LR5rrOQAUjA2uM%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 13:53:11 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Active User with given email Id Not Found\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "ValidUrlWithMissingEmailId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',400);\r",
											"pm.variables.set('statusMessage','Bad Request');\r",
											"pm.variables.set('responseMessage','EmailId is mandatory');\r",
											"pm.variables.set('TestCase', \" User SignIn - Valid url with missing email Id\");\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response contains  ${pm.variables.get('responseMessage')} message : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.jsonBody('message', pm.variables.get('responseMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\":\"March@2025\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/login",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "ValidUrlWithMissingEmailId",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n  \"password\":\"March@2025\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741787980&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XnZ8DsyfH7PCp9lr8ja5HR3djyVHGRVs38gc4IOKgAg%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741787980&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XnZ8DsyfH7PCp9lr8ja5HR3djyVHGRVs38gc4IOKgAg%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 13:59:40 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"EmailId is mandatory\",\n    \"success\": false\n}"
								},
								{
									"name": "ValidUrlWithEmailIdAndNovalue",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"\",\r\n  \"password\":\"March@2025\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741788150&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OKV02yUavkqmkS%2BFJxaePuyzmZjO8bnliVPrtflG5w0%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741788150&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OKV02yUavkqmkS%2BFJxaePuyzmZjO8bnliVPrtflG5w0%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 14:02:30 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"EmailId is mandatory\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "validUrlwithInvalidPassword",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',401);\r",
											"pm.variables.set('statusMessage','Unauthorized');\r",
											"pm.variables.set('responseMessage','Bad credentials');\r",
											"pm.variables.set('TestCase', \" User SignIn - Valid url with invalid Password\");\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response contains  ${pm.variables.get('responseMessage')} message : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.jsonBody('message', pm.variables.get('responseMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n   \"password\":\"Apri7989@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/login",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "ValidUrlWithInvalidPassword",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":\"Apri7989@\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741744482&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6EQ980vhAm4CUjAYAxS29PWP08PS%2Fft605Z%2BSpNVCwo%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741744482&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6EQ980vhAm4CUjAYAxS29PWP08PS%2Fft605Z%2BSpNVCwo%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 01:54:42 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Bad credentials\",\n    \"success\": false\n}"
								},
								{
									"name": "ValidUrlWithInvalidPasswordFormat",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":\"A67890@#\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741743902&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=WfRLqB85cJXg4YN0DCcSjO2gZqhF7zSfUfM9NVoaBCI%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741743902&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=WfRLqB85cJXg4YN0DCcSjO2gZqhF7zSfUfM9NVoaBCI%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 01:45:02 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"password must contain atleast 8 to max 32 characters, a capital letter, a small letter, a special character, a number and no space\",\n    \"success\": false\n}"
								},
								{
									"name": "ValidUrlWithInvalidNumericPassword",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":123123.5\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741744224&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=POF5B7hGsqTf8zNv4t5xt0NNamw8%2F3r2bHk1%2BqeD3T0%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741744224&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=POF5B7hGsqTf8zNv4t5xt0NNamw8%2F3r2bHk1%2BqeD3T0%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 01:50:23 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"password must contain atleast 8 to max 32 characters, a capital letter, a small letter, a special character, a number and no space\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "validUrlwithMissingPassword",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',400);\r",
											"pm.variables.set('statusMessage','Bad Request');\r",
											"pm.variables.set('responseMessage','Password is mandatory');\r",
											"pm.variables.set('TestCase', \" User SignIn - Valid url with missing password\");\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/login",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "validUrlwithMissingPassword",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\"\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741744818&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5QO9SFEFm5i623%2FdUcrclCG5uabQx9dFfd8M75dRRQA%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741744818&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5QO9SFEFm5i623%2FdUcrclCG5uabQx9dFfd8M75dRRQA%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 02:00:18 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Password is mandatory\",\n    \"success\": false\n}"
								},
								{
									"name": "validUrlwithPasswordWithNoValue",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":\"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741793907&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ySQemqKrbC32Sv8%2FutqQS%2B6N8YYnNco0p7T1HntKVu4%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741793907&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ySQemqKrbC32Sv8%2FutqQS%2B6N8YYnNco0p7T1HntKVu4%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 15:38:27 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"password must contain atleast 8 to max 32 characters, a capital letter, a small letter, a special character, a number and no space\",\n    \"success\": false\n}"
								},
								{
									"name": "validUrlwithPasswordHasOnlySpaces",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":\"      \"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741793957&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hEN6n4KhcrXsFpElmTQGiVCOFbRS2giZuxdwNlWMRhs%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741793957&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hEN6n4KhcrXsFpElmTQGiVCOFbRS2giZuxdwNlWMRhs%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 15:39:17 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"password must contain atleast 8 to max 32 characters, a capital letter, a small letter, a special character, a number and no space\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "validUrlwithInvalidEmailIdAndPassword",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',401);\r",
											"pm.variables.set('statusMessage','Unauthorized');\r",
											"pm.variables.set('responseMessage','Bad credentials');\r",
											"pm.variables.set('TestCase', \" User SignIn - Valid url with invalid emailId invalid Password\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response contains  ${pm.variables.get('responseMessage')} message : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.jsonBody('message', pm.variables.get('responseMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmailId\": \"_johhMathew@gmail.com\",\r\n  \"password\":\"Marcyuoi8@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/login",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Bug- validUrlwithInvalidEmailIdAndPassword -expecting 401 unAuthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"_johhMathew@gmail.com\",\r\n  \"password\":\"Marcyuoi8@\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741794201&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Zx9eVvmpMiuV4Nc8mmOW6u7J9%2F4ta%2F7WodkUgnlh3dA%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741794201&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Zx9eVvmpMiuV4Nc8mmOW6u7J9%2F4ta%2F7WodkUgnlh3dA%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 15:43:21 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Active User with given email Id Not Found\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "validUrlwithMissingBothEmailIdAndPassword",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',400);\r",
											"pm.variables.set('statusMessage','Bad Request');\r",
											"pm.variables.set('responseMessage','EmailId is mandatory');\r",
											"pm.variables.set('TestCase', \" User SignIn - Valid url with missing emailId missing Password\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response contains  ${pm.variables.get('responseMessage')} message : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.jsonBody('message', pm.variables.get('responseMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/login",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "validUrlwithMissingBothEmailIdAndPassword",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/login",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741786539&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=1OlDlkiY9JzJ4GJ2slA41HlZQ2pxhLUGojJor4IrnUM%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741786539&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=1OlDlkiY9JzJ4GJ2slA41HlZQ2pxhLUGojJor4IrnUM%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 13:35:39 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"EmailId is mandatory\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "InvalidBaseUrl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('TestCase', \" User SignIn - Invalid base url\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":\"March@2025\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lm/login",
									"protocol": "https",
									"host": [
										"lms-hackthon-feb25-803334c87fbe",
										"herokuapp",
										"com"
									],
									"path": [
										"lm",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "InvalidBaseUrlWithValidData",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":\"March@2025\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lm/login",
											"protocol": "https",
											"host": [
												"lms-hackthon-feb25-803334c87fbe",
												"herokuapp",
												"com"
											],
											"path": [
												"lm",
												"login"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741743249&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=797ughWb4e9iiQrTPqOCz9YQc%2BpW%2FZrYdnBL5dwvlSw%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741743249&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=797ughWb4e9iiQrTPqOCz9YQc%2BpW%2FZrYdnBL5dwvlSw%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=utf-8"
										},
										{
											"key": "Content-Language",
											"value": "en"
										},
										{
											"key": "Content-Length",
											"value": "431"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 01:34:09 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "<!doctype html><html lang=\"en\"><head><title>HTTP Status 404 – Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1></body></html>"
								},
								{
									"name": "InvalidBaseUrlWithInvalidData",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.comad\",\r\n  \"password\":\"March@2025asdf\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lm/login",
											"protocol": "https",
											"host": [
												"lms-hackthon-feb25-803334c87fbe",
												"herokuapp",
												"com"
											],
											"path": [
												"lm",
												"login"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741743563&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=d6nrAfiNL%2BmMTJ3WvD08LmGDVFH52k5kpmjtHs7DgfE%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741743563&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=d6nrAfiNL%2BmMTJ3WvD08LmGDVFH52k5kpmjtHs7DgfE%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=utf-8"
										},
										{
											"key": "Content-Language",
											"value": "en"
										},
										{
											"key": "Content-Length",
											"value": "431"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 01:39:23 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "<!doctype html><html lang=\"en\"><head><title>HTTP Status 404 – Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1></body></html>"
								}
							]
						},
						{
							"name": "missingEndpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',401);\r",
											"pm.variables.set('statusMessage','Unauthorized');\r",
											"pm.variables.set('TestCase', \" User SignIn - Missing end point\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":\"March@2025\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}",
									"host": [
										"{{lmsbaseurl}}"
									]
								}
							},
							"response": [
								{
									"name": "InvalidEndPointWithoutEmailIdAndPassword",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}",
											"host": [
												"{{lmsbaserurl}}"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741795688&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=WumXNj1lRtl%2B463rVyO4si7EGFZWv95C7xuSP9zk8xc%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741795688&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=WumXNj1lRtl%2B463rVyO4si7EGFZWv95C7xuSP9zk8xc%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Length",
											"value": "0"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 16:08:08 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "missingEndpointwithValidEmailIdAndPassword",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userLoginEmailId\": \"sdetorganizer@gmail.com\",\r\n  \"password\":\"March@2025\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}",
											"host": [
												"{{lmsbaserurl}}"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741795769&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=gXMT3ItMII1Vp5%2BleOVaWK05BkkH9O%2BWGyML%2BSOmjFM%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741795769&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=gXMT3ItMII1Vp5%2BleOVaWK05BkkH9O%2BWGyML%2BSOmjFM%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Length",
											"value": "0"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 16:09:28 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "logoutwithouttoken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',401);\r",
											"pm.variables.set('statusMessage','Unauthorized');\r",
											"pm.variables.set('TestCase', \" User Signout - No token\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/logoutlms",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"logoutlms"
									]
								}
							},
							"response": [
								{
									"name": "logoutwithouttoken",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/logoutlms",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"logoutlms"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741796812&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=zqep8%2B8OjNZIL0JA6%2FBef%2FCEYtIRuo59l9xRPNwYwwY%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741796812&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=zqep8%2B8OjNZIL0JA6%2FBef%2FCEYtIRuo59l9xRPNwYwwY%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Length",
											"value": "0"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 16:26:52 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ProgramModule-Negative",
					"item": [
						{
							"name": "Post program with invalid mandatory field program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Created\", function (){\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSeleniumcucumberbdd_1\",\r\n\"programName\": \"TestdataSeleniumcucumberbdd_9\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/saveprogram",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post program with missing mandatory field program status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Created\", function (){\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSeleniumcucumberbdd\",\r\n\"programName\": \"TestdataSeleniumcucumberbdd\",\r\n\"programStatus\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/saveprogram",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post program with existing mandatory fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Created\", function (){\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSeleniumcucumberbdd\",\r\n\"programName\": \"TestdataSeleniumcucumberbdd\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/saveprogram",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post program with missing mandatory field program name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Created\", function (){\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSeleniumcucumberbdd\",\r\n\"programName\": \"\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/saveprogram",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post program with missing endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Created\", function (){\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSelenium\",\r\n\"programName\": \"TestdataSelenium\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create a User with invalid baseurl",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSeleniumcucumberbdd\",\r\n\"programName\": \"TestdataSeleniumcucumberbdd\",\r\n\"programStatus\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lm/login",
									"protocol": "https",
									"host": [
										"lms-hackthon-feb25-803334c87fbe",
										"herokuapp",
										"com"
									],
									"path": [
										"lm",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a User with valid endpoint and request body",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"password\": \"March@2025\",\r\n\"userLoginEmailId\":\"sdetorganizer@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/login",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE program by same ProgramName",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/deletebyprogname/FunctionalTestingMadeeasygg",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deletebyprogname",
										"FunctionalTestingMadeeasygg"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Program By program by same ProgramID",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/deletebyprogid/17233",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deletebyprogid",
										"17233"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by Programid with invalid program id",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataApirestassured\",\r\n\"programName\": \"TestdataApirestassuredendtoend\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/putprogram/1813467",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"putprogram",
										"1813467"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by Programid with missing mandatory values",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataApirestassured\",\r\n\"programName\": \"\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/putprogram/18134",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"putprogram",
										"18134"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by Programid",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataApirestassured\",\r\n\"programName\": \"TestdataApirestassuredendtoend\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/putprogram/18134",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"putprogram",
										"18134"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program with missing program name",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataApirestassured\",\r\n\"programName\": \"\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/program/TestdataSeleniumcucumberbdd",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"program",
										"TestdataSeleniumcucumberbdd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program with missing mandatory values",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataApirestassured\",\r\n\"programName\": \"TestdataApirestassured\",\r\n\"programStatus\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/program/TestdataSeleniumcucumberbdd",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"program",
										"TestdataSeleniumcucumberbdd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by ProgramName [Put Operation] Ntc",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataApirestassured\",\r\n\"programName\": \"TestdataApirestassured\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/program/TestdataSeleniumcucumberbdd",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"program",
										"TestdataSeleniumcucumberbdd"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Program withinvalid ProgramId",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/programs/17008",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"programs",
										"17008"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Programs with allUsers no token",
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/allProgramsWithUsers",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"allProgramsWithUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Programs with allUsers invalid endpoint",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/allPrograms",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"allPrograms"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Programs with allUsers with invalidbaseurl",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lm/allProgramsWithUsers",
									"protocol": "https",
									"host": [
										"lms-hackthon-feb25-803334c87fbe",
										"herokuapp",
										"com"
									],
									"path": [
										"lm",
										"allProgramsWithUsers"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Batch-Negative",
					"item": [
						{
							"name": "CreatingBatchWithMissingMadatoryFields",
							"item": [
								{
									"name": "createNewBatchMissingBatchName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Batch Name is mandatory');\r",
													"pm.variables.set('TestCase', \"Batch Module - Missing Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchMissingBranchName",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741797479&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=TBdv2dK%2BMbGQ2gSeRLhRtjgJ5nR3xqIyGnB7BOUtdsY%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741797479&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=TBdv2dK%2BMbGQ2gSeRLhRtjgJ5nR3xqIyGnB7BOUtdsY%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 16:37:59 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Batch Name is mandatory\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchMissingNoofClasses",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' No of Classes is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Batch Module - Missing Batch Status\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchMissingNoofClasses",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741797558&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=MpLF%2BpFxtcG%2BI1UB1WzUGcDGamb3N8NZBwTw567yY5o%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741797558&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=MpLF%2BpFxtcG%2BI1UB1WzUGcDGamb3N8NZBwTw567yY5o%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 16:39:18 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" No of Classes is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchMissingProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' ProgramId field is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Batch Module - Missing Program Id\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "createNewBatchMissingProgramId",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741811562&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DpPB8KzEzaRBJ5FGNIwTdQaIc3hgSCh%2FKS5mGSMcY0g%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741811562&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DpPB8KzEzaRBJ5FGNIwTdQaIc3hgSCh%2FKS5mGSMcY0g%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 20:32:42 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" ProgramId field is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchMissingBatchStatus",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Batch status is needed');\r",
													"pm.variables.set('TestCase', \"Batch Module - Missing Batch Status\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchMissingBranchStatus",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741797528&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6xTc4qwGpS3aCilakcRT4RSuStaQFv4cy1sSJ0e%2FWlg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741797528&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6xTc4qwGpS3aCilakcRT4RSuStaQFv4cy1sSJ0e%2FWlg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 16:38:48 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Batch status is needed\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchMissingAllMandatoryFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Batch Name is needed');\r",
													"pm.variables.set('TestCase', \"Batch Module - Missing all mandatory feilds\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchDescription\":\"Java Course\" \r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "Bug-createNewBatchMissingBatchStatus Copy",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchDescription\":\"Java Course\" \r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741811704&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=mRl5H8igPH%2F69SLI5YQ4YRUT4ctRWChqEjCp3Y0PZjE%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741811704&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=mRl5H8igPH%2F69SLI5YQ4YRUT4ctRWChqEjCp3Y0PZjE%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 20:35:04 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" No of Classes is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "CreatNewBatch-BatchNameValidations",
							"item": [
								{
									"name": "createNewBatch-batchWithNullbatchName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Batch Name is mandatory');\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a Batch With Invalid Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":null,\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchWithNullBatchName",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":null,\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741798384&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=yhviRyY2hVH%2FONjOTs1jfuAvtJs4neYufXUcuYb6i2c%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741798384&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=yhviRyY2hVH%2FONjOTs1jfuAvtJs4neYufXUcuYb6i2c%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 16:53:04 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Batch Name is mandatory\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatch-batchWithNumericBatchName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens');\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a Batch With Invalid Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":324532453245,\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchWithNumericBatchName",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":324532453245,\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741798588&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=r2OvrbbjVH23oXT9UKDgUV9bpw%2BeiLDLHyd2OyC%2B0LQ%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741798588&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=r2OvrbbjVH23oXT9UKDgUV9bpw%2BeiLDLHyd2OyC%2B0LQ%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 16:56:28 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatch-batchNameBeginWithLetter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens');\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a Batch With Invalid Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"3jas123\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchWithBatchNameBeginWithLetter",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"3jas123\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741798704&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Ft4IDuUuPGuFDDkBvxJvZztukoL8%2Bcl1m20hlypXnRI%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741798704&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Ft4IDuUuPGuFDDkBvxJvZztukoL8%2Bcl1m20hlypXnRI%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 16:58:24 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatch-batchNameHasSpaces",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"var requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
													"pm.variables.set('responseBodyMessage',`batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens`);\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a Batch With Invalid Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"3jas 123\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchNameHavingSpace",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"3jas 123\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741798803&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=srxFgpNZx%2F3Py%2BesWn0SVESWKZ6kjc2bhcNME7ln6GU%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741798803&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=srxFgpNZx%2F3Py%2BesWn0SVESWKZ6kjc2bhcNME7ln6GU%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 17:00:03 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatch-batchWithExistingBatchName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',`Please give a different batch Name or Choose a different Program`);\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a Batch With Invalid Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"java001\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchWithExistingBatchName",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"java001\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741805065&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2BzqOxoF6odwKJav%2BB%2FXMJQLwtcMuR10HPg%2F%2BWDnmKU0%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741805065&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2BzqOxoF6odwKJav%2BB%2FXMJQLwtcMuR10HPg%2F%2BWDnmKU0%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 18:44:25 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Program editprogtestnvs with Batch-java001 already exists: ; Please give a different batch Name or Choose a different Program\",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "CreateBatch-BatchDescriptionValidations",
							"item": [
								{
									"name": "createNewBatchBatchDescriptionStartsWithLetter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space');\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a batch with invalid batch description\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"3kasdjff\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchDescriiptionStartsWithLetter",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"3kasdjff\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741799436&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=q%2BkxW%2F7Eurpj4%2B3M2OnHwDHn80%2FdI5OtFnPR5Mp1wdM%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741799436&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=q%2BkxW%2F7Eurpj4%2B3M2OnHwDHn80%2FdI5OtFnPR5Mp1wdM%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 17:10:36 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchWithNumericBatchDescription",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space');\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a batch with invalid batch description\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":3242423,  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchWithNumericBatchDescription",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":3242423,  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741799436&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=q%2BkxW%2F7Eurpj4%2B3M2OnHwDHn80%2FdI5OtFnPR5Mp1wdM%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741799436&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=q%2BkxW%2F7Eurpj4%2B3M2OnHwDHn80%2FdI5OtFnPR5Mp1wdM%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 17:10:36 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchWithBatchDescriptionEndsWithSpecialCharacter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space');\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a batch with invalid batch description\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":3242423,  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchWithBatchDesclriptionEndsWithSpecialCharacter",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0001\",\r\n \"batchDescription\":\"jklasd@@\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741799834&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=569xh1wozDvdY6QeSRSIdoLAzs1XXH8umJcuCcDqRaM%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741799834&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=569xh1wozDvdY6QeSRSIdoLAzs1XXH8umJcuCcDqRaM%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 17:17:14 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space\",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "CreateNewBatch-BatchNoofClassesConstraints",
							"item": [
								{
									"name": "createNewBatchWithBlankBatchNoofClasses",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' No of Classes is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Batch Module -Creating a batch with invalid no of classes in batch\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":\"\",\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "createNewBatchWithBlankNoOfClasses",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":\"\",\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741800349&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DMuQqix5DAY46yaNOr1%2Fd2uPseGrvs3eXZu5St3epfs%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741800349&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DMuQqix5DAY46yaNOr1%2Fd2uPseGrvs3eXZu5St3epfs%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 17:25:49 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" No of Classes is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchWithNegativeNoofClasses",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' No of Classes is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Batch Module -Creating a batch with invalid no of classes in batch\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":\"\",\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "createNewBatchWithNegativeNoofBatchClasses",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":-5,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741802152&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KKH0XlMikTvKMko2M%2B6UauivfhLJ4XUWQS9qqOe2AUY%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741802152&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KKH0XlMikTvKMko2M%2B6UauivfhLJ4XUWQS9qqOe2AUY%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 17:55:52 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" No of Classes is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchWithzeroNoofClasses",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' No of Classes is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Batch Module -Creating a batch with invalid no of classes in batch\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":0,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "createNewBatchWithZeroBatchNoofClasses",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":0,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741802106&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=NBi86PCqAby2s%2FCGS%2B5tg3UVdQTD0hYa%2FuZ1dG62jXg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741802106&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=NBi86PCqAby2s%2FCGS%2B5tg3UVdQTD0hYa%2FuZ1dG62jXg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 17:55:06 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" No of Classes is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchWithAlphatbetNumericNoofClasses",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('TestCase', \"Batch Module -Creating a batch with invalid no of classes in batch\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":\"abc\",\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "Bug-createNewBatch-BatchNoofClassesWithAlphanumeric",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":\"abc123\",\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741801239&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=G3j2eGRaAw%2FECCsuIrmBvB1hwCuhyPIXK9gRl8Gv6rg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741801239&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=G3j2eGRaAw%2FECCsuIrmBvB1hwCuhyPIXK9gRl8Gv6rg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 17:40:39 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchNoOfClasses JSON parse error: Cannot deserialize value of type `int` from String \\\"abc\\\": not a valid `int` value\",\n    \"success\": false\n}"
										},
										{
											"name": "Bug-createNewBatchWithAlphabetBatchNoOfClasses",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":\"abc\",\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741801729&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=najylGKDNSH%2FLatyXYBSxUcfFDHF6sgqcXnHRPJADHw%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741801729&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=najylGKDNSH%2FLatyXYBSxUcfFDHF6sgqcXnHRPJADHw%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 17:48:49 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchNoOfClasses JSON parse error: Cannot deserialize value of type `int` from String \\\"abc\\\": not a valid `int` value\",\n    \"success\": false\n}"
										},
										{
											"name": "Bug-createNewBatchWithBatchNoOfClassesWithSplCharacter",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":\"abc@\",\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741801817&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2Bv3utdFSmo6oStn0YZoYLkW8U1gEK2IqH%2Ba0%2FpeXsYo%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741801817&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2Bv3utdFSmo6oStn0YZoYLkW8U1gEK2IqH%2Ba0%2FpeXsYo%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 17:50:17 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchNoOfClasses JSON parse error: Cannot deserialize value of type `int` from String \\\"abc@\\\": not a valid `int` value\",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "CreateNewBatchWithProgramIdValidations",
							"item": [
								{
									"name": "createNewBatchWithBlankProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' ProgramId field is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Batch Module -Creating a batch with invalid program id\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":\"\"\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchWithBlankProgramId",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":\"\"\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741802572&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=uAl8UxROJ8gjzy3lWIrCIlbrFkJLeKA6wLu4aGvUm%2BM%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741802572&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=uAl8UxROJ8gjzy3lWIrCIlbrFkJLeKA6wLu4aGvUm%2BM%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 18:02:52 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" ProgramId field is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchWithNonExistingProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',404);\r",
													"pm.variables.set('statusMessage','Not Found');\r",
													"var requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
													"pm.variables.set('responseBodyMessage',`Program not found with Id : ${requestBody.programId} `);\r",
													"pm.variables.set('TestCase', \"Batch Module -Creating a batch with invalid program id\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":123432\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchWithNonExistingProgramId",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":123432\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741805327&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0zVAKVaa5NV1nXvxu672%2BUczGTiOfXxtp3Zl2PiJTFk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741805327&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0zVAKVaa5NV1nXvxu672%2BUczGTiOfXxtp3Zl2PiJTFk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 18:48:47 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Program not found with Id : 123432 \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchWithNegativeProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' ProgramId should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Batch Module -Creating a batch with invalid program id\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":-123432\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "batchWithNegativeProgramId",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":-123432\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741803677&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=pzqAYo4OFGhE0Zy1xoDS220xVYKik0Mt%2BwPBJSoZrYc%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741803677&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=pzqAYo4OFGhE0Zy1xoDS220xVYKik0Mt%2BwPBJSoZrYc%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 18:21:16 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" ProgramId should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatchWithAlphanumericProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('TestCase', \"Batch Module -Creating a batch with invalid program id\");\r",
													"pm.variables.set('responseBodyMessage',' ProgramId field is needed; It should be a positive number ');\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":\"abc\"\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "Bug-batchWithAlphaticProgramId",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":\"abc\"\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741802658&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=M%2BxCOVjP37CKQleoQKngUVHKMDLFFcqvZCgxpU5u5I8%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741802658&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=M%2BxCOVjP37CKQleoQKngUVHKMDLFFcqvZCgxpU5u5I8%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 18:04:17 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"programId JSON parse error: Cannot deserialize value of type `java.lang.Long` from String \\\"abc\\\": not a valid `java.lang.Long` value\",\n    \"success\": false\n}"
										},
										{
											"name": "bug-batchWithAlphanumericProgramId",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":\"agfgh23\"\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741803319&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=N3tN4K8f5C8HBTzLr8LLssMwhWeBKTuBkTvddHPWXeQ%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741803319&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=N3tN4K8f5C8HBTzLr8LLssMwhWeBKTuBkTvddHPWXeQ%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 18:15:19 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"programId JSON parse error: Cannot deserialize value of type `java.lang.Long` from String \\\"agfgh23\\\": not a valid `java.lang.Long` value\",\n    \"success\": false\n}"
										},
										{
											"name": "Bug-batchWithProgramIdWithSpecialCharacter",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":\"agfgh@\"\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741803458&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=4YRvjzG5V3iWV3CRJhosDYPWeqQ73PWc8y7%2FAYj2iYg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741803458&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=4YRvjzG5V3iWV3CRJhosDYPWeqQ73PWc8y7%2FAYj2iYg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 18:17:38 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"programId JSON parse error: Cannot deserialize value of type `java.lang.Long` from String \\\"agfgh@\\\": not a valid `java.lang.Long` value\",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "CreateNewBatch-BatchStatusValidations",
							"item": [
								{
									"name": "createNewBatchWithBlankBatchStatus",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Invalid Status: must be Active or Inactive');\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a batch with invalid batch status\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0003\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"in-Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "BatchWithBlankBatchStatus",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741804043&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=kNUCV%2BBxG39%2FxBmraN9yrsY95eQTAJm6xpolNoPBwJg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741804043&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=kNUCV%2BBxG39%2FxBmraN9yrsY95eQTAJm6xpolNoPBwJg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 18:27:23 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Batch status is needed\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "createNewBatch-BatchStatusInvalid",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Invalid Status: must be Active or Inactive');\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a batch with invalid batch status\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"alksdjfklsa\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches"
											]
										}
									},
									"response": [
										{
											"name": "BatchWithInvalidBatchStatus",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"alksdjfklsa\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741804175&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0LZSoSOGHsE%2FRa%2F4zjvmqUFyKPV%2FKGbBAsnN3%2Fqixt8%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741804175&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0LZSoSOGHsE%2FRa%2F4zjvmqUFyKPV%2FKGbBAsnN3%2Fqixt8%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 18:29:35 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Invalid Status: must be Active or Inactive\",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "PutBatchByBatchIdWithMissingMadatoryFields",
							"item": [
								{
									"name": "putBatchMissingBatchName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Batch Name is mandatory');\r",
													"pm.variables.set('TestCase', \"Put Batch By Batch Id- Missing Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "batchMissingBranchName",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741820723&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=jVxXG9r7V5m9n5l%2Ft5O%2Bpjy0pXyyqGmoaw1i6FSZLmA%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741820723&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=jVxXG9r7V5m9n5l%2Ft5O%2Bpjy0pXyyqGmoaw1i6FSZLmA%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 23:05:22 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Batch Name is mandatory\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putBatchByBatchIdWithMissingNoofClasses",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' No of Classes is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Put Batch by Batch Id- Missing No of Classes\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchByBatchIdWithMissingNoofClasses",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741821161&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Q42dzdgR%2BoQWe%2BoJ37f%2Bve3icbI1U1DFdldKwgg0kvo%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741821161&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Q42dzdgR%2BoQWe%2BoJ37f%2Bve3icbI1U1DFdldKwgg0kvo%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 23:12:41 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" No of Classes is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putBatchBatchIdMissingProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' ProgramId field is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Put Batch By Batch Id - Missing Program Id\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchBatchIdMissingProgramId",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741821297&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=HJHwHJ5SWbhQyBvwW6au6cv02BjRd6%2BHGyyeW6qPMRc%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741821297&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=HJHwHJ5SWbhQyBvwW6au6cv02BjRd6%2BHGyyeW6qPMRc%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 23:14:57 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" ProgramId field is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putBatchByBatchIdMissingBatchStatus",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Batch status is needed');\r",
													"pm.variables.set('TestCase', \"Put BatchBy Batch Id - Missing Batch Status\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "Bug-putBatchByBatchIdMissingBatchStatus",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"java001101\",\r\n \"batchDescription\":\"Java Course\",  \r\n\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741821336&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=jMRrFbxK1%2BVZNB1qbkqZcQ0%2BbbQ2Bry3spi0w9WH6lU%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741821336&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=jMRrFbxK1%2BVZNB1qbkqZcQ0%2BbbQ2Bry3spi0w9WH6lU%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 23:15:36 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Batch status is needed\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putBatchbyBatchIdMissingAllMandatoryFields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Batch Name is mandatory'); //every run gets different output\r",
													"pm.variables.set('TestCase', \"Put Batch By Batch Id - Missing all mandatory feilds\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchDescription\":\"Java Course\" \r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "Bug-putBatchbyBatchIdMissingAllMandatoryFields",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchDescription\":\"Java Course\" \r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741821876&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=32z%2BUsSdQVLHlI3%2F6i%2BLQ%2FiME%2FvI5VnhtffHq8HOu3k%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741821876&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=32z%2BUsSdQVLHlI3%2F6i%2BLQ%2FiME%2FvI5VnhtffHq8HOu3k%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 23:24:36 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Invalid Status: must be Active or Inactive\",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "PutBatchByBatchId-BatchNameValidations",
							"item": [
								{
									"name": "putBatchByBatchIdWithNullbatchName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Batch Name is mandatory');\r",
													"pm.variables.set('TestCase', \"Put Batch by Batch Id - Creating a Batch With Invalid Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":null,\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchByBatchIdWithNullbatchName",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":null,\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741822282&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=B3fs7%2FXM0SZVYB9lqQODYGBc6QvvqnHZwo9BjOp2ryI%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741822282&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=B3fs7%2FXM0SZVYB9lqQODYGBc6QvvqnHZwo9BjOp2ryI%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 23:31:22 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Batch Name is mandatory\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putBatchByBatchIdWithNumericBatchName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens');\r",
													"pm.variables.set('TestCase', \"Batch Module - Creating a Batch With Invalid Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":324532453245,\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchByBatchIdWithNumericBatchName",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":324532453245,\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741822792&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=JVm8zLLuqxRgPVvibIXdyHD42NG%2BFi3q8eDpprJxFAE%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741822792&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=JVm8zLLuqxRgPVvibIXdyHD42NG%2BFi3q8eDpprJxFAE%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 23:39:52 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putBatchByBatchId-BatchNameBeginWithLetter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens');\r",
													"pm.variables.set('TestCase', \"Put Batch by Batch Id - Creating a Batch With Invalid Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"3jas123\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchByBatchId-BatchNameBeginWithLetter",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"3jas123\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741823035&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=q6rNkHa%2FpA6%2FF%2FtFoek3eMBJDu0IKK89skyhzA19MTQ%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741823035&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=q6rNkHa%2FpA6%2FF%2FtFoek3eMBJDu0IKK89skyhzA19MTQ%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Mar 2025 23:43:55 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putbatchByBatchId-BatchNameHasSpaces",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"var requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
													"pm.variables.set('responseBodyMessage',`batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens`);\r",
													"pm.variables.set('TestCase', \"Put Batch By Batch Id -  With Invalid Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"java  001\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putbatchByBatchId-BatchNameHasSpaces",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"java  001\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741824949&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=bzlWPtDczC7HYPayHkwVt9wX9HSIPewuzphBUJTUYMs%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741824949&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=bzlWPtDczC7HYPayHkwVt9wX9HSIPewuzphBUJTUYMs%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:15:49 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putBatchByBatchIdbatchWithExistingBatchName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','Please give a different batch Name');\r",
													"pm.variables.set('TestCase', \"update Batch By BatchId - Creating a Batch With Existing Batch Name\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"java001\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchByBatchIdbatchWithExistingBatchName",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\":\"java001\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741824207&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5W485lWgy438z5QlNZDOFEZb8WMKV6Q0E3cIQvfEeag%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741824207&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5W485lWgy438z5QlNZDOFEZb8WMKV6Q0E3cIQvfEeag%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:03:26 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchName Please provide a valid name and must begin with letter and can have letters,numbers and sometimes hyphens\",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "putBatchByBatchId-BatchDescriptionValidations",
							"item": [
								{
									"name": "putBatchByBatchIdBatchDescriptionStartsWithLetter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space');\r",
													"pm.variables.set('TestCase', \"Put Batch by BatchId-  with invalid batch description\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"3kasdjff\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchByBatchIdBatchDescriptionStartsWithLetter",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"3kasdjff\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741824159&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=3ugMDEqyTC4X1GOh5c2jw6%2BZDcj4zpjn8og1c3N9IkQ%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741824159&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=3ugMDEqyTC4X1GOh5c2jw6%2BZDcj4zpjn8og1c3N9IkQ%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:02:39 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putBatchByBatchIdWithNumericBatchDescription",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space');\r",
													"pm.variables.set('TestCase', \"Update Batch By Batch Id - Creating a batch with invalid batch description\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":3242423,  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchByBatchIdWithNumericBatchDescription",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":3242423,  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741825424&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=x9s3jd1DRXduJEqTT70HaeR%2BuizLCzkosZuAzSPRWjs%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741825424&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=x9s3jd1DRXduJEqTT70HaeR%2BuizLCzkosZuAzSPRWjs%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:23:44 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space\",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putBatchByBatchIdWithBatchDescriptionEndsWithSpecialCharacter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage','batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space');\r",
													"pm.variables.set('TestCase', \"update Batch by BatchId- batch with invalid batch description\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":3242423,  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchByBatchIdWithBatchDescriptionEndsWithSpecialCharacter",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":3242423,  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741825513&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=jeNN3P%2FCEgtj63qwtDQlq6aClVoi3FACE1%2FPRFbJGyI%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741825513&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=jeNN3P%2FCEgtj63qwtDQlq6aClVoi3FACE1%2FPRFbJGyI%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:25:13 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"batchDescription must begin with letter and can only have letters, numbers, comma, hyphen, colon, period, underscore and space\",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "putBatchByBatchId-BatchNoofClassesValidations",
							"item": [
								{
									"name": "putBatchByBatchIdWithBlankBatchNoofClasses",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' No of Classes is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Update batch by batch id-batch with invalid no of classes in batch\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":\"\",\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchByBatchIdWithBlankBatchNoofClasses",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":\"\",\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741825787&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KGKhWEFdkKs8a3Blt%2BTnx%2BBgScxy42aG3zkyLROQqC0%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741825787&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KGKhWEFdkKs8a3Blt%2BTnx%2BBgScxy42aG3zkyLROQqC0%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:29:47 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" No of Classes is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "updateBatchByBatchIdWithNegativeNoofClasses",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' No of Classes is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Update Batch By batchId - batch with invalid no of classes in batch\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":-5,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "updateBatchByBatchIdWithNegativeNoofClasses",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":-5,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741825911&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OnhSYqeXJcfmTlCJv%2FnQlHOT4tSVpdgWOzdNwcHxFzk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741825911&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OnhSYqeXJcfmTlCJv%2FnQlHOT4tSVpdgWOzdNwcHxFzk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:31:51 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" No of Classes is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "putBatchByBatchIdWithzeroNoofClasses",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' No of Classes is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Update Batch By batch Id- batch with invalid no of classes in batch\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":0,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "putBatchByBatchIdWithzeroNoofClasses",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":0,\r\n \"programId\":16800\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741826094&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=EVvqvobWq91IflS61MyBJ9XMNhtz4TvGGqtbd0A8YSs%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741826094&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=EVvqvobWq91IflS61MyBJ9XMNhtz4TvGGqtbd0A8YSs%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:34:54 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" No of Classes is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "UpdateBatchByBatchIdWithProgramIdValidations",
							"item": [
								{
									"name": "updateBatchByBatchIdWithBlankProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' ProgramId field is needed; It should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Update Batch By batch id - batch with invalid program id\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":\"\"\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "updateBatchByBatchIdWithBlankProgramId",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":\"\"\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741826230&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=lu4ldbI03KLHW4m%2BDjIktErbh8%2Bpij7%2BwMghYrCZjsU%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741826230&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=lu4ldbI03KLHW4m%2BDjIktErbh8%2Bpij7%2BwMghYrCZjsU%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:37:10 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" ProgramId field is needed; It should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "updateBatchByBatchIdWithNonExistingProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',404);\r",
													"pm.variables.set('statusMessage','Not Found');\r",
													"var requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
													"pm.variables.set('responseBodyMessage',`Program not found with Id : ${requestBody.programId} `);\r",
													"pm.variables.set('TestCase', \"Uodate Batch By Batch Id -Creating a batch with invalid program id\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":123432\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "updateBatchByBatchIdWithNonExistingProgramId",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":123432\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741826596&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2FOeqdEF9kz1qSC32AFgKYFyUqQxgi1kphXWSVyL9UR0%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741826596&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2FOeqdEF9kz1qSC32AFgKYFyUqQxgi1kphXWSVyL9UR0%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:43:16 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"Program not found with Id : 123432 \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "updateBatchByBatchIdWithNegativeProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('responseBodyMessage',' ProgramId should be a positive number ');\r",
													"pm.variables.set('TestCase', \"Update Batch By batchId- a batch with invalid program id\");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":-123432\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "updateBatchByBatchIdWithNegativeProgramId",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":-123432\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741826365&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=aPBJrrckNly7py0PzoZ07ZNMsklGM2WVQrxF%2BqhV3Uo%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741826365&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=aPBJrrckNly7py0PzoZ07ZNMsklGM2WVQrxF%2BqhV3Uo%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:39:25 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \" ProgramId should be a positive number \",\n    \"success\": false\n}"
										}
									]
								},
								{
									"name": "updateBatchByBatchIdWithAlphanumericProgramId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set('statusCode',400);\r",
													"pm.variables.set('statusMessage','Bad Request');\r",
													"pm.variables.set('TestCase', \"Update Batch By batchId- a batch with invalid program id\");\r",
													"pm.variables.set('responseBodyMessage',' ProgramId field is needed; It should be a positive number ');\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
													"});\r",
													"\r",
													"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
													"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
													"});\r",
													"\r",
													"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
													"    var jsonData = pm.response.json(); \r",
													"    pm.expect(jsonData.message).to.eq(pm.variables.get('responseBodyMessage'));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":\"abc\"\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/batches/10012",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"batches",
												"10012"
											]
										}
									},
									"response": [
										{
											"name": "Bug-updateBatchByBatchIdWithAlphanumericProgramId",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n \"batchName\": \"javaBeg0002\",\r\n \"batchDescription\":\"jklasd\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":\"abc\"\r\n }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{lmsbaserurl}}/batches/10012",
													"host": [
														"{{lmsbaserurl}}"
													],
													"path": [
														"batches",
														"10012"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "Cowboy"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741826489&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=1HtmpGV2MVZufb6XUvlUlPpfvK1cvaH29RmJzfmmeRg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741826489&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=1HtmpGV2MVZufb6XUvlUlPpfvK1cvaH29RmJzfmmeRg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Method"
												},
												{
													"key": "Vary",
													"value": "Access-Control-Request-Headers"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												},
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Expires",
													"value": "0"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000 ; includeSubDomains"
												},
												{
													"key": "X-Frame-Options",
													"value": "DENY"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Mar 2025 00:41:29 GMT"
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												}
											],
											"cookie": [],
											"body": "{\n    \"message\": \"programId JSON parse error: Cannot deserialize value of type `java.lang.Long` from String \\\"abc\\\": not a valid `java.lang.Long` value\",\n    \"success\": false\n}"
										}
									]
								}
							]
						},
						{
							"name": "PutBatchByBatchId-missingBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('responseMessage','Invalid endpoint');\r",
											"pm.variables.set('TestCase', \"Update Batch by BatchId - missing batch Id\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var responseText = pm.response.text();     \r",
											"    pm.expect(responseText).to.include(pm.variables.get('responseMessage'));  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"batchName\":\"Cierro22\",\r\n \"batchDescription\":\"Cierro Concepts\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":16800\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/batches/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										""
									]
								}
							},
							"response": [
								{
									"name": "PutProgramWithNonExistingProgramId",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"Cierro22\",\r\n \"batchDescription\":\"Cierro Concepts\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/batches/1209",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"1209"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741820034&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=U7CyikMyu1yMJBEb%2B6P7GKd01YjjG%2FmSIoYTozAUvHM%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741820034&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=U7CyikMyu1yMJBEb%2B6P7GKd01YjjG%2FmSIoYTozAUvHM%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 22:53:54 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Batch not found with Id : 1209 \",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PutBatchByBatchId-NonExistingBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('responseBodyMessage','Batch not found with Id');\r",
											"pm.variables.set('TestCase', \"Update Batch by BatchId - non existant batch Id\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"pm.test(`Response is JSON : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseBodyMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"batchName\":\"Cierro22\",\r\n \"batchDescription\":\"Cierro Concepts\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":16800\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/batches/1209",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"1209"
									]
								}
							},
							"response": [
								{
									"name": "PutProgramWithNonExistingProgramId",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"batchName\":\"Cierro22\",\r\n \"batchDescription\":\"Cierro Concepts\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":16800\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaserurl}}/batches/1209",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"1209"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741820034&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=U7CyikMyu1yMJBEb%2B6P7GKd01YjjG%2FmSIoYTozAUvHM%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741820034&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=U7CyikMyu1yMJBEb%2B6P7GKd01YjjG%2FmSIoYTozAUvHM%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 22:53:54 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Batch not found with Id : 1209 \",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "getAllBatcheswithMissingEndPoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('responseMessage','Invalid endpoint');\r",
											"pm.variables.set('TestCase', \"Get All Batches - Missing End Point\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var responseText = pm.response.text();     \r",
											"    pm.expect(responseText).to.include(pm.variables.get('responseMessage'));  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batche",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batche"
									]
								}
							},
							"response": [
								{
									"name": "missingEndPoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}",
											"host": [
												"{{lmsbaserurl}}"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741805842&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7gv%2BPZIxTuVgMKkPGG2NCB2WoKtcTLAJCaF6ggN7uV8%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741805842&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7gv%2BPZIxTuVgMKkPGG2NCB2WoKtcTLAJCaF6ggN7uV8%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 18:57:22 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "Invalid endpoint"
								}
							]
						},
						{
							"name": "getBatchByBatchIdWithoutBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('responseMessage','Invalid endpoint');\r",
											"pm.variables.set('TestCase', \"Get Batch by BatchId - Missing Batch Id\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var responseText = pm.response.text();     \r",
											"    pm.expect(responseText).to.include(pm.variables.get('responseMessage'));  \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/batchId/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"batchId",
										""
									]
								}
							},
							"response": [
								{
									"name": "getBatchByIdWithoutBatchId",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/batchId/",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"batchId",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741807535&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=yjpC5VRbgMzrogN5ovu3V6sPilhW%2BZKFSC1PusdR1jw%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741807535&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=yjpC5VRbgMzrogN5ovu3V6sPilhW%2BZKFSC1PusdR1jw%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 19:25:35 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "Invalid endpoint"
								}
							]
						},
						{
							"name": "getBatchByBatchIdWithInvalidBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('responseMessage','Invalid endpoint');\r",
											"pm.variables.set('TestCase', \"Get Batch by BatchId - Invalid Batch Id\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var responseText = pm.response.text();     \r",
											"    pm.expect(responseText).to.include(pm.variables.get('responseMessage'));  \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/batchId/adsf123",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"batchId",
										"adsf123"
									]
								}
							},
							"response": [
								{
									"name": "getBatchByBatchIdWithInvalidBatchId",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/batchId/adsf123",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"batchId",
												"adsf123"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741808239&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5%2FaVgSvwlnnFfoQcavQy7Hrm%2FxtOnksTAeEWGf7dggI%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741808239&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5%2FaVgSvwlnnFfoQcavQy7Hrm%2FxtOnksTAeEWGf7dggI%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 19:37:19 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "Invalid endpoint"
								}
							]
						},
						{
							"name": "getBatchByBatchIdWithNonExistantBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('responseBodyMessage','Batch not found with Id');\r",
											"pm.variables.set('TestCase', \"Get Batch By BatchId - non existant batch Id\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/batchId/123",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"batchId",
										"123"
									]
								}
							},
							"response": [
								{
									"name": "getBatchByBatchIdWithoutBatchId",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/batchId/123",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"batchId",
												"123"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741807506&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=tqETOmt9D4Fc9%2BTy6Gbly1M%2FszeHg4jQd4qQTH7hQc0%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741807506&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=tqETOmt9D4Fc9%2BTy6Gbly1M%2FszeHg4jQd4qQTH7hQc0%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 19:25:06 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Batch not found with Id : 123 \",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "getBatchByBatchNameWithMissingBatchName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('responseMessage','Invalid endpoint');\r",
											"pm.variables.set('TestCase', \"Get Batch by BatchName - Missing Batch Name\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var responseText = pm.response.text();     \r",
											"    pm.expect(responseText).to.include(pm.variables.get('responseMessage'));  \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/batchName/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"batchName",
										""
									]
								}
							},
							"response": [
								{
									"name": "getBatchByBatchNameWithMissingBatchName",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/batchName/",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"batchName",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741808800&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=yjj7so38J3wFC%2BxQcy%2BYJ0MT6BPag%2BO4TOMDQJ%2B5eAU%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741808800&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=yjj7so38J3wFC%2BxQcy%2BYJ0MT6BPag%2BO4TOMDQJ%2B5eAU%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 19:46:40 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "Invalid endpoint"
								}
							]
						},
						{
							"name": "getBatchByBatchNameWithNonExistantBatchName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"var actualUrl =pm.collectionVariables.replaceIn(pm.request.url).toString();\r",
											"var batchName=actualUrl.substring(actualUrl.lastIndexOf(\"/\")+1);\r",
											"pm.variables.set('responseBodyMessage',`programBatch with name ${batchName} not found`);\r",
											"pm.variables.set('TestCase', \"Get Batch By BatchName - non existant batch Id\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/batchName/Java0456",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"batchName",
										"Java0456"
									]
								}
							},
							"response": [
								{
									"name": "getBatchByBatchNameWithNonExistantBatchName",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/batchName/Java0456",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"batchName",
												"Java0456"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741808840&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2FK0fKysTkFvgPrTLr%2F30ITcPrg8fSXrgQ%2BmbujVR828%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741808840&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2FK0fKysTkFvgPrTLr%2F30ITcPrg8fSXrgQ%2BmbujVR828%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 19:47:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"programBatch with name Java0456 not found\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "getBatchByBatchNameWithNumericBatchName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"var actualUrl =pm.collectionVariables.replaceIn(pm.request.url).toString();\r",
											"var batchName=Number(actualUrl.substring(actualUrl.lastIndexOf(\"/\")+1));\r",
											"pm.variables.set('responseBodyMessage',`programBatch with name ${batchName} not found`);\r",
											"pm.variables.set('TestCase', \"Get Batch By BatchId - non existant batch Id\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/batchName/12313",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"batchName",
										"12313"
									]
								}
							},
							"response": [
								{
									"name": "getBatchByBatchNameWithInvalidBatchName",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/batchName/12313",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"batchName",
												"12313"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741809143&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DBqXAzS8yhmg3ZT5zd%2FA5%2Bx9406Fj2J9CWp%2BcMtcNws%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741809143&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DBqXAzS8yhmg3ZT5zd%2FA5%2Bx9406Fj2J9CWp%2BcMtcNws%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 19:52:23 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"programBatch with name 12313 not found\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "getBatchByProgramIdWithMissingProgramId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('responseMessage','Invalid endpoint');\r",
											"pm.variables.set('TestCase', \"Get Batch by ProgramId - Missing ProgramId\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var responseText = pm.response.text();     \r",
											"    pm.expect(responseText).to.include(pm.variables.get('responseMessage'));  \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/program/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"program",
										""
									]
								}
							},
							"response": [
								{
									"name": "getBatchByProgramIdwithMissingProgramId",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/program/",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"program",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741809551&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=WPrTFDu0EhDt5PNx%2BI9dBNIwg768ZOjQEIU%2F7LF6Uxw%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741809551&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=WPrTFDu0EhDt5PNx%2BI9dBNIwg768ZOjQEIU%2F7LF6Uxw%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 19:59:11 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "Invalid endpoint"
								}
							]
						},
						{
							"name": "getBatchByProgramIdWithNonExistantProgramId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"var actualUrl =pm.collectionVariables.replaceIn(pm.request.url).toString();\r",
											"var programId=Number(actualUrl.substring(actualUrl.lastIndexOf(\"/\")+1));\r",
											"pm.variables.set('responseBodyMessage',`batch with this programId ${programId} not found`);\r",
											"pm.variables.set('TestCase', \"Get Batch By ProgramId - non existant Program Id\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/program/123",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"program",
										"123"
									]
								}
							},
							"response": [
								{
									"name": "getBatchByProgarmIdWithNonExistantProgramId",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/program/123",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"program",
												"123"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741809696&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6UzFD1J0bG1N8kwW%2FqVoOzTxYFoyyuMkZrwS4D2NVOA%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741809696&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6UzFD1J0bG1N8kwW%2FqVoOzTxYFoyyuMkZrwS4D2NVOA%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 20:01:35 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"batch with this programId 123 not found\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "getBatchByProgramIdWithInvalidProgramId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('responseMessage','Invalid endpoint');\r",
											"pm.variables.set('TestCase', \"Get Batch By Program Id - Invalid ProgramId\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var responseText = pm.response.text();     \r",
											"    pm.expect(responseText).to.include(pm.variables.get('responseMessage'));  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/program/adsf45",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"program",
										"adsf45"
									]
								}
							},
							"response": [
								{
									"name": "getBatchByBatchNameWithInvalidBatchName",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/batchName/12313",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"batchName",
												"12313"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741809143&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DBqXAzS8yhmg3ZT5zd%2FA5%2Bx9406Fj2J9CWp%2BcMtcNws%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741809143&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DBqXAzS8yhmg3ZT5zd%2FA5%2Bx9406Fj2J9CWp%2BcMtcNws%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 19:52:23 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"programBatch with name 12313 not found\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "DeleteBatchBatchId-NonExistingBatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.message).to.include(pm.variables.get('responseBodyMessage'));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"var actualUrl =pm.collectionVariables.replaceIn(pm.request.url).toString();\r",
											"var programId=Number(actualUrl.substring(actualUrl.lastIndexOf(\"/\")+1));\r",
											"pm.variables.set('responseBodyMessage',`Batch id not found or not exists ${programId}`);\r",
											"pm.variables.set('TestCase', \"Delete Batch By BatchId - non existant BatchId\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/123",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"123"
									]
								}
							},
							"response": [
								{
									"name": "DeleteBatchBatchId-NonExistingBatchId",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/123",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												"123"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741827226&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=rA0zyNonWkOUuzgc9ZT8WmURq6YKx2CgBtjydVQH%2Bo8%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741827226&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=rA0zyNonWkOUuzgc9ZT8WmURq6YKx2CgBtjydVQH%2Bo8%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Mar 2025 00:53:46 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Batch id not found or not exists 123\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "DeleteBatchBatchIdwithMissingBatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status Code ${pm.variables.get('statusCode')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get('statusCode'));\r",
											"});\r",
											"\r",
											"pm.test(`Status Message  ${pm.variables.get('statusMessage')} : ${pm.variables.get('TestCase')}`, function () {\r",
											"pm.response.to.have.status(pm.variables.get('statusMessage'));\r",
											"});\r",
											"\r",
											"pm.test(`Check if response contains  ${pm.variables.get('responseMessage')} : ${pm.variables.get('TestCase')}`, function () { \r",
											"    var responseText = pm.response.text();     \r",
											"    pm.expect(responseText).to.include(pm.variables.get('responseMessage'));  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set('statusCode',404);\r",
											"pm.variables.set('statusMessage','Not Found');\r",
											"pm.variables.set('responseMessage','Invalid endpoint');\r",
											"pm.variables.set('TestCase', \"Delete Batch BatchId - Missing End Point\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										""
									]
								}
							},
							"response": [
								{
									"name": "DeleteBatchBatchIdwithMissingBatchId",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{lmsbaserurl}}/batches/",
											"host": [
												"{{lmsbaserurl}}"
											],
											"path": [
												"batches",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741827367&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Tf2kcbogocSdo2P8vpuerPXZqLotHjXyQhWcCwJL8oM%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741827367&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Tf2kcbogocSdo2P8vpuerPXZqLotHjXyQhWcCwJL8oM%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Date",
											"value": "Thu, 13 Mar 2025 00:56:07 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "Invalid endpoint"
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{authToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "UserModule - Negative",
					"item": [
						{
							"name": "PostUserwithoutFirstName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"kjjkj\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9024033029\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"kkkjj@gmail.com\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUser",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9029029029\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741611901&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=L8L4vy%2F9uPR0uyd6%2FFl0PzPGtJfRayF4M4HzrMIcGwk%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741611901&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=L8L4vy%2F9uPR0uyd6%2FFl0PzPGtJfRayF4M4HzrMIcGwk%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 13:05:00 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"userFirstName must contain two or more alphabets only\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserwithoutLastName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9029029029\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserwithoutLastName Copy",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"****\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9029029029\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741611758&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=B1vDX5lMWAs86YrAVefCPnwJ9rR0Balyop4VLHGXISk%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741611758&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=B1vDX5lMWAs86YrAVefCPnwJ9rR0Balyop4VLHGXISk%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 13:02:38 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"userLastName must contain one or more alphabets only\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserwithoutPhoneNumbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserwithoutPhoneNumber",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741618820&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=YMKEtbJVethEqZFYSA7gNRInAI1ReCLDxeWodkw1RNo%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741618820&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=YMKEtbJVethEqZFYSA7gNRInAI1ReCLDxeWodkw1RNo%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 15:00:20 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Phone Number is required\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserPhoneNumberwithZeros",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"0000000000\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserphonenumberzeros",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741612016&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=RK4PHof%2F4S29s6I2jP5fsi0W1r1bUYIYZysHPAydQZ4%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741612016&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=RK4PHof%2F4S29s6I2jP5fsi0W1r1bUYIYZysHPAydQZ4%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 13:06:56 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserPhoneNumberIncorrect",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserPhoneNumberIncorrect",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741619130&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=HqMZM1tZWj%2FA%2FNvsjwBCYJMAs6LLvv3W2KWrf3u2mvg%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741619130&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=HqMZM1tZWj%2FA%2FNvsjwBCYJMAs6LLvv3W2KWrf3u2mvg%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 15:05:30 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserwithoutLinkedinurl",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserwithoutLinkedinurl",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741619306&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sGx%2BxYwcu0Lyy2%2Bp9arV69%2FDYmn2mEkPymNlGYdKmHE%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741619306&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sGx%2BxYwcu0Lyy2%2Bp9arV69%2FDYmn2mEkPymNlGYdKmHE%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 15:08:26 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"userLinkedinUrlmust contain www.linkedin.com\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserLinkedinurlspecialCharacters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"*&*&*&*\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserLinkedinurlSpecialCharacters",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"*&*&*&*\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741619889&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=WUzJ%2BU6CFq3wUYvXhXc3CgV3bqN6OF%2BjvjCE3z82yQc%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741619889&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=WUzJ%2BU6CFq3wUYvXhXc3CgV3bqN6OF%2BjvjCE3z82yQc%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 15:18:09 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"userLinkedinUrlmust contain www.linkedin.com\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserLinkedinurlincorrect",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.in/*****\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserLinkedinurlincorrect accepting 0 -Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/0\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741621573&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XM1qO6WZw6oLVd696EqCXRen%2BVrmaazozQIFDcIdkis%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741621573&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XM1qO6WZw6oLVd696EqCXRen%2BVrmaazozQIFDcIdkis%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 15:46:13 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								},
								{
									"name": "PostUserLinkedinurlincorrect accepting*** -Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741621635&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=k8OSm911XG7O2Ng%2BMdCLUu%2B%2F6nR%2B903AFlrTsGhjk8I%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741621635&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=k8OSm911XG7O2Ng%2BMdCLUu%2B%2F6nR%2B903AFlrTsGhjk8I%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 15:47:15 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserincorrectlocation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909050\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserLinkedincorrectlocationforphonenumber---Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/johnnolan\",\n\"userLocation\": \"Texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741621972&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=79ESEhn5PElihEfsT%2BSBS7Of2uRKp%2F9j76882ow8f7k%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741621972&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=79ESEhn5PElihEfsT%2BSBS7Of2uRKp%2F9j76882ow8f7k%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 15:52:51 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserLocationSpecialCharacters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"****\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserLocationSpecialCharacters",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.co/*****\",\n\"userLocation\": \"****\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741622571&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DlW34TBzbDIJudeg%2F5PevYYXSMjaZ6icUZq4eoD7YPA%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741622571&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DlW34TBzbDIJudeg%2F5PevYYXSMjaZ6icUZq4eoD7YPA%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:02:51 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User Location must contain two or more alphabets only\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserinvalidRole",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"const validRoleIds = [\"R01\", \"R02\", \"R03\"];",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"if(rId == null || rId.length==0)",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"if(!validRoleIds.includes(rId))",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R031\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserinvalidRole",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R031\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741622972&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=3zsgxTIfjxxD75QvhaLJWbVkqtWeRobIeCzgi6ZqnDg%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741622972&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=3zsgxTIfjxxD75QvhaLJWbVkqtWeRobIeCzgi6ZqnDg%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:09:32 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Failed to create user, as 'roleId' is invalid !! \",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserinvalidRolestatus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"const validRoleIds = [\"R01\", \"R02\", \"R03\"];",
											"",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"if(rId == null || rId.length==0)",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"if(!validRoleIds.includes(rId))",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"",
											"if(rstatus == null || rstatus.length==0)",
											"{",
											"    console.log(\"Role status is required\");",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"****\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserinvalidRolestatus",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"****\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741623115&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Ln1OVASJBtL0lXUtWlNZvK4SCKEImP%2F8mRckOTQ7GzM%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741623115&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Ln1OVASJBtL0lXUtWlNZvK4SCKEImP%2F8mRckOTQ7GzM%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:11:55 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Invalid Status: must be Active or Inactive\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserinvalidTimeZone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"const validRoleIds = [\"R01\", \"R02\", \"R03\"];",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"if(rId == null || rId.length==0)",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"if(!validRoleIds.includes(rId))",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"if(rstatus == null || rstatus.length==0)",
											"{",
											"    console.log(\"Role status is required\");",
											"}",
											"if(zone == null || zone.length==0)",
											"{",
											"    console.log(\"Visa status is required\");",
											"}",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"OST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserinvalidTimeZone allowing ET-Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"ET\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741623485&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0FjvmG0J2cMONbVJl30r6Jk99BtUbE0M9sljmAx2Dpw%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741623485&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0FjvmG0J2cMONbVJl30r6Jk99BtUbE0M9sljmAx2Dpw%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:18:04 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								},
								{
									"name": "PostUserinvalidTimeZoneallowingSpecials -Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"E****T\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741623550&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=TehzKnOJalvCSkfB%2BFr%2FnWpABYi1Sla3gPkuLFZlYO0%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741623550&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=TehzKnOJalvCSkfB%2BFr%2FnWpABYi1Sla3gPkuLFZlYO0%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:19:10 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								},
								{
									"name": "PostUserinvalidTimeZoneAllowingZeros -Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"0\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741623615&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=tLVqclXp2PfvviFiZ4UMCbaOXDRd6Q1G%2BlIWTWBqCzc%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741623615&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=tLVqclXp2PfvviFiZ4UMCbaOXDRd6Q1G%2BlIWTWBqCzc%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:20:16 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								},
								{
									"name": "PostUserwithoutMandatoryTimeZone - Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741623657&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=BHbS3dN5mvlI1OWmoKiZVQsdC5EI%2FiChoqnMuQ7BnyU%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741623657&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=BHbS3dN5mvlI1OWmoKiZVQsdC5EI%2FiChoqnMuQ7BnyU%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:20:57 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								},
								{
									"name": "PostUserinvalidTimeZonefor the country code- Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741623735&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=HQ%2FRc%2Fp5zWiDpWls%2BAtEsHf0aiouimWzWPrP6KMK%2BXQ%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741623735&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=HQ%2FRc%2Fp5zWiDpWls%2BAtEsHf0aiouimWzWPrP6KMK%2BXQ%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:22:15 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserinvalidVisaStatus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/;",
											"const validRoleIds = [\"R01\", \"R02\", \"R03\"]; ",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"if(rId == null || rId.length==0)",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"if(!validRoleIds.includes(rId))",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"if(rstatus == null || rstatus.length==0)",
											"{",
											"    console.log(\"Role status is required\");",
											"}",
											"if(zone == null || zone.length==0)",
											"{",
											"    console.log(\"TimeZone is required\");",
											"}",
											"if(visa == null || visa.length==0)",
											"{",
											"    console.log(\"Visa status is required\");",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-ED\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserinvalidVisaStatusFormat-Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741623975&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6tHMBXa3XoyuZram0QxJDbNP5cTt%2F5ED1jJxcs1ayEE%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741623975&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6tHMBXa3XoyuZram0QxJDbNP5cTt%2F5ED1jJxcs1ayEE%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:26:15 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								},
								{
									"name": "PostUserwithoutVisaStatus-Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741624016&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=2XajkMa%2BUmZjUCvL3MHuQBpoFEYVrkbHXAaGdaLAL3s%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741624016&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=2XajkMa%2BUmZjUCvL3MHuQBpoFEYVrkbHXAaGdaLAL3s%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:26:56 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								},
								{
									"name": "PostUserinvalidVisaStatusFormat-Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741624057&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=WCSUSun3TPQrGm11CSQYn2wq65adnqS1ssu0gJlcq2g%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741624057&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=WCSUSun3TPQrGm11CSQYn2wq65adnqS1ssu0gJlcq2g%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:27:37 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								},
								{
									"name": "PostUserinvalidVisaStatusspecialcharacters - Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"*****\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741624094&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KSEeJnYKCKKjkSnvoFof8OCNmKhEv2cU5NQfOgGl188%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741624094&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KSEeJnYKCKKjkSnvoFof8OCNmKhEv2cU5NQfOgGl188%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:28:14 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								},
								{
									"name": "PostUserinvalidVisaStatusZeros -Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"Active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"0\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741624134&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=J%2FUZLvc7jocdMjDVw2mecaBI3DbiH8LLvw%2BALtDYnLw%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741624134&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=J%2FUZLvc7jocdMjDVw2mecaBI3DbiH8LLvw%2BALtDYnLw%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 16:28:54 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserinvalidLoginstatus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"const validRoleIds = [\"R01\", \"R02\", \"R03\"];",
											"",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"if(rId == null || rId.length==0)",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"if(!validRoleIds.includes(rId))",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"",
											"if(rstatus == null || rstatus.length==0)",
											"{",
											"    console.log(\"Role status is required\");",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserinvalidLoginstatusAlphabetsonly - Bug",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"0***\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741630441&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2Bu3usWuZ%2FDKOGMHs%2ByC1RwSIzAh6iYb%2BY2z9WE81JCk%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741630441&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2Bu3usWuZ%2FDKOGMHs%2ByC1RwSIzAh6iYb%2BY2z9WE81JCk%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:14:01 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserinvalidUserEmailId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"const validRoleIds = [\"R01\", \"R02\", \"R03\"];",
											"",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"if(rId == null || rId.length==0)",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"if(!validRoleIds.includes(rId))",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"",
											"if(rstatus == null || rstatus.length==0)",
											"{",
											"    console.log(\"Role status is required\");",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserinvalidUserEmailId",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"(***@gmail.com\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatus",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741630538&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=3nWeKJ4TGtVg0pBzaIfuO%2FSjgkgfWjiLYX3j7YtgSTI%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741630538&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=3nWeKJ4TGtVg0pBzaIfuO%2FSjgkgfWjiLYX3j7YtgSTI%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:15:38 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User email Id is required and should be in proper email format\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserinvalidEndpoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"const validRoleIds = [\"R01\", \"R02\", \"R03\"];",
											"",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"if(rId == null || rId.length==0)",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"if(!validRoleIds.includes(rId))",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"",
											"if(rstatus == null || rstatus.length==0)",
											"{",
											"    console.log(\"Role status is required\");",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatu",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatu"
									]
								}
							},
							"response": [
								{
									"name": "PostUserinvalidEndpoint - doubt",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"test@gmail.com\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatu",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatu"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741631372&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=labzlp29AAj%2FTdblkCs13otWsoe9GnNaS8J%2B0epUBto%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741631372&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=labzlp29AAj%2FTdblkCs13otWsoe9GnNaS8J%2B0epUBto%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:29:32 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Request method 'POST' is not supported\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PostUserinvalidbaseurl",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"/**",
											" * Validating the request datas",
											" * ",
											" */",
											"",
											"const requestJson = JSON.parse(pm.request.body.raw);",
											"var firstName = requestJson.userFirstName;",
											"var lastName = requestJson.userLastName;",
											"var phnumber = requestJson.userPhoneNumber;",
											"var linkedln = requestJson.userLinkedinUrl;",
											"var rId = requestJson.roleId;",
											"var rstatus = requestJson.userRoleStatus;",
											"var zone =requestJson.userTimeZone;",
											"var visa = requestJson.userVisaStatus;",
											"const NameRegExp=/^[a-zA-Z][a-zA-Z0-9-]+$/;",
											"const numberCheckZeros =/^0+$/; ",
											"const validRoleIds = [\"R01\", \"R02\", \"R03\"];",
											"",
											"",
											"if(firstName == null || firstName.length==0 || !NameRegExp.test(firstName))",
											"{",
											"    console.log(\"userFirstName must contain two or more alphabets only\");",
											"}",
											"",
											"if(lastName == null || lastName.length==0 || !NameRegExp.test(lastName))",
											"{",
											"    console.log(\"userLastName cannot be empty!! userLastName must contain one or more alphabets only\");",
											"}",
											"",
											"if(phnumber == null || phnumber.length==0)",
											"{",
											"    console.log(\"Phone Number is required\");",
											"}",
											"",
											"if(phnumber == null || numberCheckZeros.test(phnumber))",
											"{",
											"    console.log(\"phoneNumber must be in this format (CountryCode)(PhoneNo) +91 1234567890\");",
											"     ",
											"}",
											"if(linkedln == null || linkedln.length==0)",
											"{",
											"    console.log(\"userLinkedinUrlmust contain www.linkedin.com\");",
											"}",
											"",
											"if(rId == null || rId.length==0)",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"if(!validRoleIds.includes(rId))",
											"{",
											"    console.log(\"Failed to create user, as 'roleId' is invalid !!\");",
											"}",
											"",
											"if(rstatus == null || rstatus.length==0)",
											"{",
											"    console.log(\"Role status is required\");",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"\"\n    }\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lmos/users/roleStatus",
									"protocol": "https",
									"host": [
										"lms-hackthon-feb25-803334c87fbe",
										"herokuapp",
										"com"
									],
									"path": [
										"lmos",
										"users",
										"roleStatus"
									]
								}
							},
							"response": [
								{
									"name": "PostUserinvalidEndpoint - doubt",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\"userComments\": \"New User SDET\",\n\"userEduPg\": \"MCA\",\n\"userEduUg\": \"BSC\",\n\"userFirstName\": \"John\",\n\"userLastName\": \"Nolan\",\n\"userLinkedinUrl\": \"www.linkedin.com/*****\",\n\"userLocation\": \"texas\",\n\"userMiddleName\": \"K\",\n\"userPhoneNumber\": \"+91 9090909090\",\n\"userRoleMaps\": [\n{\n\"roleId\": \"R03\",\n\"userRoleStatus\": \"active\"\n}\n],\n\"userTimeZone\": \"EST\",\n\"userVisaStatus\": \"H4-EAD\",\n\"userLogin\": {\n        \"loginStatus\": \"\",\n        \"userLoginEmail\": \"test@gmail.com\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleStatu",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleStatu"
											]
										}
									},
									"status": "Method Not Allowed",
									"code": 405,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741631372&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=labzlp29AAj%2FTdblkCs13otWsoe9GnNaS8J%2B0epUBto%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741631372&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=labzlp29AAj%2FTdblkCs13otWsoe9GnNaS8J%2B0epUBto%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:29:32 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Request method 'POST' is not supported\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "getAllUsers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/user",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": [
								{
									"name": "getAllUsers-InvalidEndpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaseurl}}/user",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"user"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741631298&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Nq0LcufWEbdwrCsMjkNQ27YEOmBs2hySCTDALIe7wUo%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741631298&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Nq0LcufWEbdwrCsMjkNQ27YEOmBs2hySCTDALIe7wUo%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:28:18 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "Invalid endpoint"
								},
								{
									"name": "getAllUsers-InvalidURL -Doubt",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms/users",
											"protocol": "https",
											"host": [
												"lms-hackthon-feb25-803334c87fbe",
												"herokuapp",
												"com"
											],
											"path": [
												"lms",
												"users"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741632246&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=pdtydzw%2BMU%2BAPnDPkwKLU0GYZwnis5%2B%2FxX2IR2oic8Y%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741632246&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=pdtydzw%2BMU%2BAPnDPkwKLU0GYZwnis5%2B%2FxX2IR2oic8Y%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Length",
											"value": "0"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:44:06 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "GetAllActiveUsers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/activeUser",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"activeUser"
									]
								}
							},
							"response": [
								{
									"name": "GetAllActiveUsers - InvalidEndpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaseurl}}/users/activeUser",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"activeUser"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741631618&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=EnIGg%2FlJOU63DScOi2Ab0SruecE4mJRQUOo9hVi6PXw%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741631618&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=EnIGg%2FlJOU63DScOi2Ab0SruecE4mJRQUOo9hVi6PXw%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:33:38 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found with Id : activeUser \",\n    \"success\": false\n}"
								},
								{
									"name": "GetAllActiveUsers-invalid",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lims/users/activeUsers",
											"protocol": "https",
											"host": [
												"lms-hackthon-feb25-803334c87fbe",
												"herokuapp",
												"com"
											],
											"path": [
												"lims",
												"users",
												"activeUsers"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741646070&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=xufuPS5tISBoFkpPW0sdaH2VEz6zGVCAef5D0Pk0Hvk%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741646070&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=xufuPS5tISBoFkpPW0sdaH2VEz6zGVCAef5D0Pk0Hvk%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=utf-8"
										},
										{
											"key": "Content-Language",
											"value": "en"
										},
										{
											"key": "Content-Length",
											"value": "431"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 22:34:30 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "<!doctype html><html lang=\"en\"><head><title>HTTP Status 404 – Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1></body></html>"
								}
							]
						},
						{
							"name": "GetActiveEmailUsers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/fetch-email",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"fetch-email"
									]
								}
							},
							"response": [
								{
									"name": "GetActiveEmailUsers-InvalidEndpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaseurl}}/fetch-email",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"fetch-email"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741631692&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=v3naAaJuIrec%2FMa%2Frgbj0jcMylc0qWJjF8POEITn18E%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741631692&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=v3naAaJuIrec%2FMa%2Frgbj0jcMylc0qWJjF8POEITn18E%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:34:52 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "Invalid endpoint"
								},
								{
									"name": "GetActiveEmailUsers-invalid url 401",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms//fetch-email",
											"protocol": "https",
											"host": [
												"lms-hackthon-feb25-803334c87fbe",
												"herokuapp",
												"com"
											],
											"path": [
												"lms",
												"",
												"fetch-email"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741646626&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Vz5CfLtb%2FBRgGojc%2BzetFeNM3chgY3okYnhS9%2F29Hmk%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741646626&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Vz5CfLtb%2FBRgGojc%2BzetFeNM3chgY3okYnhS9%2F29Hmk%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Length",
											"value": "0"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 22:43:45 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "GetActiveEmailUsers -invalid url 404",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lims/fetch-email",
											"protocol": "https",
											"host": [
												"lms-hackthon-feb25-803334c87fbe",
												"herokuapp",
												"com"
											],
											"path": [
												"lims",
												"fetch-email"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741646666&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=rgIVqnRtQBItI8GrJxtyF7OPeRpR1P89FOsGCaIE07w%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741646666&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=rgIVqnRtQBItI8GrJxtyF7OPeRpR1P89FOsGCaIE07w%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=utf-8"
										},
										{
											"key": "Content-Language",
											"value": "en"
										},
										{
											"key": "Content-Length",
											"value": "431"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 22:44:26 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "<!doctype html><html lang=\"en\"><head><title>HTTP Status 404 – Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1></body></html>"
								}
							]
						},
						{
							"name": "GetAllRoles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/role",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"role"
									]
								}
							},
							"response": [
								{
									"name": "GetAllRoles-InvalidEndpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaseurl}}/role",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"role"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741631871&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2B%2FHfREvf4NLzd5PmLKrP%2FBFAKv3k8sIUx7%2FPPnwQKYA%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741631871&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=%2B%2FHfREvf4NLzd5PmLKrP%2FBFAKv3k8sIUx7%2FPPnwQKYA%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:37:51 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "Invalid endpoint"
								},
								{
									"name": "GetAllRoles - invalidUrl",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lims/roles",
											"protocol": "https",
											"host": [
												"lms-hackthon-feb25-803334c87fbe",
												"herokuapp",
												"com"
											],
											"path": [
												"lims",
												"roles"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741646747&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=tINDYVZAzt93g2pyj7REII9qp%2B5yzugJKPr1dcvkY4I%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741646747&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=tINDYVZAzt93g2pyj7REII9qp%2B5yzugJKPr1dcvkY4I%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=utf-8"
										},
										{
											"key": "Content-Language",
											"value": "en"
										},
										{
											"key": "Content-Length",
											"value": "431"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 22:45:47 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "<!doctype html><html lang=\"en\"><head><title>HTTP Status 404 – Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1></body></html>"
								}
							]
						},
						{
							"name": "GetUserByUserId-invalidUserId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/:userId",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "0"
										}
									]
								}
							},
							"response": [
								{
									"name": "GetUserByUserId -invalid",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaseurl}}/users/:userId",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "U"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741647221&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=SOw%2BT8hZ%2FQiSqJhGkjfCOhQVOF3CGLCT5nw%2BzxFQe28%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741647221&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=SOw%2BT8hZ%2FQiSqJhGkjfCOhQVOF3CGLCT5nw%2BzxFQe28%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 22:53:41 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found with Id : U \",\n    \"success\": false\n}"
								},
								{
									"name": "GetUserByUserId - zeros",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaseurl}}/users/:userId",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "0"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741655357&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=i0JjBUecvS%2FO2SU9wSqm%2F4MOoOr%2FIo1kT%2FBc6Jrcz78%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741655357&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=i0JjBUecvS%2FO2SU9wSqm%2F4MOoOr%2FIo1kT%2FBc6Jrcz78%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Mar 2025 01:09:17 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found with Id : 0 \",\n    \"success\": false\n}"
								},
								{
									"name": "GetUserByUserId-Specialcharacters",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaseurl}}/users/:userId",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "U8&"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741655425&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6q%2BMECMrAaaxSK%2B20aruzoJLPAayxxjjbCipQtBsPaA%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741655425&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6q%2BMECMrAaaxSK%2B20aruzoJLPAayxxjjbCipQtBsPaA%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Mar 2025 01:10:25 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found with Id : U8& \",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "GetAlluserswithroles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/role",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"role"
									]
								}
							},
							"response": [
								{
									"name": "GetAlluserswithroles-InvalidEndpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaseurl}}/users/role",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"role"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741631970&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=66Br3KVl5l2LQH1aStY%2FBNOtDw%2FAh7nl3CQpBkhJlZg%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741631970&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=66Br3KVl5l2LQH1aStY%2FBNOtDw%2FAh7nl3CQpBkhJlZg%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:39:30 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found with Id : role \",\n    \"success\": false\n}"
								},
								{
									"name": "GetAlluserswithroles-invalidUrl",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lims/users/role",
											"protocol": "https",
											"host": [
												"lms-hackthon-feb25-803334c87fbe",
												"herokuapp",
												"com"
											],
											"path": [
												"lims",
												"users",
												"role"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741646807&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Hf8OHfTf01ou2llp7fTfU74n4YQdaqT%2FszmjDaQ%2FD6s%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741646807&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Hf8OHfTf01ou2llp7fTfU74n4YQdaqT%2FszmjDaQ%2FD6s%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=utf-8"
										},
										{
											"key": "Content-Language",
											"value": "en"
										},
										{
											"key": "Content-Length",
											"value": "431"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 22:46:47 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "<!doctype html><html lang=\"en\"><head><title>HTTP Status 404 – Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1></body></html>"
								}
							]
						},
						{
							"name": "GetUserStatusCount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/byStatu",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"byStatu"
									]
								}
							},
							"response": [
								{
									"name": "GetUserStatusCount-InvalidEndpoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaseurl}}/users/byStatu",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"byStatu"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741632093&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DMMQwPt8R9M9DdgDnGbM9I0xG5jzAJtx64Ew6RxadEU%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741632093&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DMMQwPt8R9M9DdgDnGbM9I0xG5jzAJtx64Ew6RxadEU%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 18:41:33 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found with Id : byStatu \",\n    \"success\": false\n}"
								},
								{
									"name": "GetUserStatusCount - invalidurl",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lims/users/byStatus",
											"protocol": "https",
											"host": [
												"lms-hackthon-feb25-803334c87fbe",
												"herokuapp",
												"com"
											],
											"path": [
												"lims",
												"users",
												"byStatus"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741646857&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5AUesqOZq3zyTlTWwr96E7t%2B0rY02EDumNUUTBycink%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741646857&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5AUesqOZq3zyTlTWwr96E7t%2B0rY02EDumNUUTBycink%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=utf-8"
										},
										{
											"key": "Content-Language",
											"value": "en"
										},
										{
											"key": "Content-Length",
											"value": "431"
										},
										{
											"key": "Date",
											"value": "Mon, 10 Mar 2025 22:47:37 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "<!doctype html><html lang=\"en\"><head><title>HTTP Status 404 – Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1></body></html>"
								}
							]
						},
						{
							"name": "GetUserDetailsbyUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/details/:id",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"details",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										}
									]
								}
							},
							"response": [
								{
									"name": "GetUserDetailsbyUserId Copy",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{lmsbaseurl}}/users/details/:id",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"details",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": ""
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741798386&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DQQPTgA6%2BkIsFnMkqx%2Fi87TCIsAjxJqx%2FUrl%2B9D54PE%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741798386&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=DQQPTgA6%2BkIsFnMkqx%2Fi87TCIsAjxJqx%2FUrl%2B9D54PE%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Mar 2025 16:53:06 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						},
						{
							"name": "PutUserRoleId-invalidRoleId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userRoleList\": [\n    {\n      \"roleId\": \"R-01\",\n      \"userRoleStatus\": \"active\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleId/:userId",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleId",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "***"
										}
									]
								}
							},
							"response": [
								{
									"name": "PutUserRoleId",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userRoleList\": [\n    {\n      \"roleId\": \"R-01\",\n      \"userRoleStatus\": \"active\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleId/{{userId}}",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleId",
												"{{userId}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741711701&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7IlPQOKUFgsLdr4nKeMhSNRdh8py2l7j65IE5LxHjFM%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741711701&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7IlPQOKUFgsLdr4nKeMhSNRdh8py2l7j65IE5LxHjFM%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Mar 2025 16:48:21 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Failed to assign new User Role, as 'roleId' is invalid !!  U783\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PutUserRoleId-invalidRolestatus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userRoleList\": [\n    {\n      \"roleId\": \"R-01\",\n      \"userRoleStatus\": \"activei\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleId/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleId",
										"{{userId}}"
									]
								}
							},
							"response": [
								{
									"name": "PutUserRolestatus",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userRoleList\": [\n    {\n      \"roleId\": \"R-01\",\n      \"userRoleStatus\": \"active\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roleId/{{userId}}",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roleId",
												"{{userId}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741711701&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7IlPQOKUFgsLdr4nKeMhSNRdh8py2l7j65IE5LxHjFM%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741711701&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7IlPQOKUFgsLdr4nKeMhSNRdh8py2l7j65IE5LxHjFM%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Mar 2025 16:48:21 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Failed to assign new User Role, as 'roleId' is invalid !!  U783\",\n    \"success\": false\n}"
								}
							]
						},
						{
							"name": "PutUserRoleId-invalidEndpoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roeId/user",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roeId",
										"user"
									]
								}
							},
							"response": [
								{
									"name": "PutUserRoleId-invalidEndpoint",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userRoleList\": [\n    {\n      \"roleId\": \"R01\",\n      \"userRoleStatus\": \"activei\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/roeId/{{userId}}",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"roeId",
												"{{userId}}"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741711836&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Go%2BpkutkB8M7HbMkZs2P0%2BkwD0PqVfTSJ9ER5%2FWNEAU%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741711836&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Go%2BpkutkB8M7HbMkZs2P0%2BkwD0PqVfTSJ9ER5%2FWNEAU%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "0"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "text/plain;charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "16"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Mar 2025 16:50:36 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "Invalid endpoint"
								}
							]
						},
						{
							"name": "PutUserRoleId-invalidURL",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"  /*  pm.collectionVariables.set(\"CurrentTestType\",\"No Auth Testing\");",
											" pm.execution.setNextRequest(\"PostUser-NoAuth\");*/"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userRoleList\": [\n    {\n      \"roleId\": \"R01\",\n      \"userRoleStatus\": \"activei\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lmos/users/roleId/{{userId}}",
									"protocol": "https",
									"host": [
										"lms-hackthon-feb25-803334c87fbe",
										"herokuapp",
										"com"
									],
									"path": [
										"lmos",
										"users",
										"roleId",
										"{{userId}}"
									]
								}
							},
							"response": [
								{
									"name": "PutUserRoleId-invalidURL",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userRoleList\": [\n    {\n      \"roleId\": \"R01\",\n      \"userRoleStatus\": \"activei\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lmos/users/roleId/{{userId}}",
											"protocol": "https",
											"host": [
												"lms-hackthon-feb25-803334c87fbe",
												"herokuapp",
												"com"
											],
											"path": [
												"lmos",
												"users",
												"roleId",
												"{{userId}}"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1741711924&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=IV6EvGWJtFQpG7LLxhRGqXgE2MGTSQ7IuD45ivspGU0%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1741711924&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=IV6EvGWJtFQpG7LLxhRGqXgE2MGTSQ7IuD45ivspGU0%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Content-Type",
											"value": "text/html;charset=utf-8"
										},
										{
											"key": "Content-Language",
											"value": "en"
										},
										{
											"key": "Content-Length",
											"value": "431"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Mar 2025 16:52:04 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "<!doctype html><html lang=\"en\"><head><title>HTTP Status 404 – Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 – Not Found</h1></body></html>"
								}
							]
						},
						{
							"name": "Delete user basic Auth No Bearer token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{\r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint =pm.iterationData.get(\"EndPoint\")+pm.collectionVariables.get(\"userId\");\r",
											"\r",
											"    var constructedUrl=baseUrl+ apiEndpoint;\r",
											"    var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"    \r",
											"    console.log(constructedUrl);\r",
											"    console.log(actualUrl);\r",
											"\r",
											"    if (constructedUrl == actualUrl )\r",
											"    {\r",
											"        var actualMethod = pm.request.method.toUpperCase();\r",
											"        var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"        console.log(actualMethod);\r",
											"        console.log(expectedMethod);\r",
											"\r",
											"        if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"        else{\r",
											"            pm.variables.set('statusCode', pm.iterationData.get(\"statusCode\"));\r",
											"            pm.variables.set('statusMessage', pm.iterationData.get(\"statusMessage\"));\r",
											"            pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"        }\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "",
											"type": "string"
										},
										{
											"key": "password",
											"value": "March@2025",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User Invalid userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have success: false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/120",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"120"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User Invalid userId NoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/120",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"120"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Handle invalid endpoint\", function () {\r",
											"    var statusCode = pm.response.code;\r",
											"    \r",
											"    if (statusCode === 404 || statusCode === 400) {\r",
											"        console.warn(\"Invalid endpoint detected:\", pm.response.text());\r",
											"        pm.expect(pm.response.text()).to.include(\"Invalid endpoint\");\r",
											"    } else {\r",
											"        pm.response.to.have.status(200);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/deluser/120",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deluser",
										"120"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User invalid endpoint NoAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/120",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"120"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by roleId V2  basic Auth No Bearer token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "",
											"type": "string"
										},
										{
											"key": "password",
											"value": "March@2025",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"facets\":{\r\n \"facetedFields\": [\r\n {\r\n \"displayName\":\"Testing\",\r\n \"filterValues\": [\r\n {\r\n \"count\":2,\r\n \"name\":\"V2\"\r\n }\r\n ]\r\n }\r\n ]\r\n },\r\n \"users\": [\r\n {\r\n \"userComments\":\"{{userComments}}\",\r\n \"userEduPg\":\"{{userEduPg}}\",\r\n \"userEduUg\":\"{{userEduUg}}\",\r\n \"userFirstName\":\"{{userFirstName}}\",\r\n \"userId\":\"{{userId}}\",\r\n \"userLastName\":\"{{userLastName}}\",\r\n \"userLinkedinUrl\":\"{{userLinkedinUrl}}\",\r\n \"userLocation\":\"{{userLocation}}\",\r\n \"userLoginEmail\":\"{{userLoginEmail}}\",\r\n \"userMiddleName\":\"{{userMiddleName}}\",\r\n \"userPhoneNumber\":{{userPhoneNumber}},\r\n \"userTimeZone\":\"{{userTimeZone}}\",\r\n \"userVisaStatus\":\"{{userVisaStatus}}\"\r\n }\r\n ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/v2/users",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by roleId V2 missing endpoint and request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/v2/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"v2",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by roleId V2 missing endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"facets\":{\r\n \"facetedFields\": [\r\n {\r\n \"displayName\":\"Testing\",\r\n \"filterValues\": [\r\n {\r\n \"count\":2,\r\n \"name\":\"V2\"\r\n }\r\n ]\r\n }\r\n ]\r\n },\r\n \"users\": [\r\n {\r\n \"userComments\":\"{{userComments}}\",\r\n \"userEduPg\":\"{{userEduPg}}\",\r\n \"userEduUg\":\"{{userEduUg}}\",\r\n \"userFirstName\":\"{{userFirstName}}\",\r\n \"userId\":\"{{userId}}\",\r\n \"userLastName\":\"{{userLastName}}\",\r\n \"userLinkedinUrl\":\"{{userLinkedinUrl}}\",\r\n \"userLocation\":\"{{userLocation}}\",\r\n \"userLoginEmail\":\"{{userLoginEmail}}\",\r\n \"userMiddleName\":\"{{userMiddleName}}\",\r\n \"userPhoneNumber\":{{userPhoneNumber}},\r\n \"userTimeZone\":\"{{userTimeZone}}\",\r\n \"userVisaStatus\":\"{{userVisaStatus}}\"\r\n }\r\n ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/v2/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"v2",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by roleId basic Auth No Bearer token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "",
											"type": "string"
										},
										{
											"key": "password",
											"value": "March@2025",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roles/{{roleId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roles",
										"{{roleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by roleId missing endpoint and request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roles/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by roleId missing endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/roles/{{roleId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"roles",
										"{{roleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users for program by Invalid programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have success: false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/programs/2569",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"programs",
										"2569"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users for program by programId basic Auth No Bearer token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "",
											"type": "string"
										},
										{
											"key": "password",
											"value": "March@2025",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/programs/{{programId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"programs",
										"{{programId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users for program by Invalid programId or missing request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/programs/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"programs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get programs by Invalid batchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have success: false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/programBatch/1234",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"programBatch",
										"1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get programs by batchId Basic Auth no bear token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "sdetorganizer@gmail.com",
											"type": "string"
										},
										{
											"key": "password",
											"value": "March@2025",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/programBatch/{{batchId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"programBatch",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get programs by batchId missing endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/prog",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"prog"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users batchId by Invalid userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have success: false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/user/K123",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"user",
										"K123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users batchId by userId basic Auth No Bearer token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "sdetorganizer@gmail.com",
											"type": "string"
										},
										{
											"key": "password",
											"value": "March@2025",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/user/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users batchId by userId missing endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/user",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update roleProgramBatchStatus by Invalid userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have success: false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"programId\":{{programId}},\r\n \"roleId\":\"{{roleId}}\",\r\n \"userId\":\"{{userId}}\",\r\n \"userRoleProgramBatches\": [\r\n {\r\n \"batchId\":{{batchId}},\r\n \"userRoleProgramBatchStatus\":\r\n \"{{userRoleProgramBatchStatus}}\"\r\n }\r\n ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleProgramBatchStatus/Q123",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleProgramBatchStatus",
										"Q123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update roleProgramBatchStatus by userId Basic Auth no bear token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "sdetorganizer@gmail.com",
											"type": "string"
										},
										{
											"key": "password",
											"value": "March@2025",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"programId\":{{programId}},\r\n \"roleId\":\"{{roleId}}\",\r\n \"userId\":\"{{userId}}\",\r\n \"userRoleProgramBatches\": [\r\n {\r\n \"batchId\":{{batchId}},\r\n \"userRoleProgramBatchStatus\":\r\n \"{{userRoleProgramBatchStatus}}\"\r\n }\r\n ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleProgramBatchStatus/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleProgramBatchStatus",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update roleProgramBatchStatus by userId missing endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have success: false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"programId\":{{programId}},\r\n \"roleId\":\"{{roleId}}\",\r\n \"userId\":\"{{userId}}\",\r\n \"userRoleProgramBatches\": [\r\n {\r\n \"batchId\":{{batchId}},\r\n \"userRoleProgramBatchStatus\":\r\n \"{{userRoleProgramBatchStatus}}\"\r\n }\r\n ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/roleProgramBatchStatus/z123",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"roleProgramBatchStatus",
										"z123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User by UserId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should have success: false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"usercomments\",\r\n  \"userEduPg\": \"mcs\",\r\n  \"userEduUg\": \"app\",\r\n  \"userFirstName\": \"cool\", \r\n  \"userLastName\": \"find\",\r\n  \"userMiddleName\": \"who\",\r\n  \"userLinkedinUrl\": \"https://www.linkedin.com/in/coolfindwho/\",\r\n  \"userLocation\": \"Ny\",\r\n  \"userLoginEmail\": \"testuserqaz@gmail.com\",\r\n  \"userPhoneNumber\": \"+1 1678954238\",\r\n  \"userTimeZone\": \"est\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/S123",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"S123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User by UserId basic Auth No Bearer token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "sdetorganizer@gmail.com",
											"type": "string"
										},
										{
											"key": "password",
											"value": "March@2025",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"usercomments\",\r\n  \"userEduPg\": \"mcs\",\r\n  \"userEduUg\": \"app\",\r\n  \"userFirstName\": \"cool\", \r\n  \"userLastName\": \"find\",\r\n  \"userMiddleName\": \"who\",\r\n  \"userLinkedinUrl\": \"https://www.linkedin.com/in/coolfindwho/\",\r\n  \"userLocation\": \"Ny\",\r\n  \"userLoginEmail\": \"testuserqaz@gmail.com\",\r\n  \"userPhoneNumber\": \"+1 1678954238\",\r\n  \"userTimeZone\": \"est\",\r\n  \"userVisaStatus\": \"H4\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User by UserId missing endpoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\", \r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/us/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"us",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update userlogin status by userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"loginStatus\":\"{{loginstatus}}\",\r\n //\"password\":\"Happy\",\r\n //\"message\": \"JSON parse error: Unrecognized field \\\"password\\\" (class com.numpyninja.lms.dto.UserLoginDto), not marked as ignorable\",  \r\n //raise bug in jira  \r\n \"roleIds\": [\r\n \"{{roleId}}\"\r\n ],\r\n \"status\":\"{{status}}\",\r\n\"userLoginEmail\":\"{{userLoginEmail}}\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/userLogin/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"userLogin",
										"{{userId}}"
									]
								}
							},
							"response": [
								{
									"name": "Update userlogin status by userId",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"loginStatus\":\"{{loginstatus}}\",\r\n //\"password\":\"Happy\",\r\n //\"message\": \"JSON parse error: Unrecognized field \\\"password\\\" (class com.numpyninja.lms.dto.UserLoginDto), not marked as ignorable\",  \r\n //raise bug in jira  \r\n \"roleIds\": [\r\n \"{{roleId}}\"\r\n ],\r\n \"status\":\"{{status}}\",\r\n\"userLoginEmail\":\"{{userLoginEmail}}\"\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/userLogin/k45",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"userLogin",
												"k45"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Update userlogin status by userId no token",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n \"loginStatus\":\"{{loginstatus}}\",\r\n //\"password\":\"Happy\",\r\n //\"message\": \"JSON parse error: Unrecognized field \\\"password\\\" (class com.numpyninja.lms.dto.UserLoginDto), not marked as ignorable\",  \r\n //raise bug in jira  \r\n \"roleIds\": [\r\n \"{{roleId}}\"\r\n ],\r\n \"status\":\"{{status}}\",\r\n\"userLoginEmail\":\"{{userLoginEmail}}\"\r\n }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{lmsbaseurl}}/users/userLogin/{{userId}}",
											"host": [
												"{{lmsbaseurl}}"
											],
											"path": [
												"users",
												"userLogin",
												"{{userId}}"
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "ClassModule-Negative",
					"item": [
						{
							"name": "CreateClassWithExistingClassTopic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithEmptyClassTopic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\" \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithSpecialChar",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"!@#$%^\",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithoutBatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"!@#$%^\",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithSpecialCharBatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":!@#$%,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithalphabeticBatchId Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":\"abcd\",\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithoutClassDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassInvalidClassDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"10-2025-06T19:04:41.12sd\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithEmptyClassNo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithNumStaffId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithoutStaffId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithInvalidClassScheduleDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"10-2026-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassWithoutScheduleDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\"\r\n\r\n\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateClassNumClassStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": 12345,\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClassesWithInvalidEp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/allClasseswww",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"allClasseswww"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllUpcomingClassesBySpecialCharStudentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/upcomingClasses/!@#$",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"upcomingClasses",
										"!@"
									],
									"hash": "$"
								}
							},
							"response": []
						},
						{
							"name": "GetAllUpcomingClassesByNonExistingStudentId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/upcomingClasses/1000000",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"upcomingClasses",
										"1000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClassesByNonExtStaffId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classesByStaff/7865",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classesByStaff",
										"7865"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClassesByWithoutStaffId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classesByStaff/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classesByStaff",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClassesWithNonExtClassTopic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classes/MedicalCoding",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classes",
										"MedicalCoding"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClasseswithNonExtBatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classesbyBatch/87654",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classesbyBatch",
										"87654"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClasseswithoutBatchId Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classesbyBatch/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classesbyBatch",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GetClssDetailsByEmptyClassId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/class/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"class",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GetClssDetailsByNonExtClassId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/class/097687",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"class",
										"097687"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetallRecordingsByEmptyBatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batchRecordings/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batchRecordings",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GetallRecordingsBySpecCharBatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batchRecordings/!@#$%^&*",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batchRecordings",
										"!@"
									],
									"hash": "$%^&*"
								}
							},
							"response": []
						},
						{
							"name": "GetClassRecordingBySpecCharClassId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/class/#$%^&*!@#",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"class",
										""
									],
									"hash": "$%^&*!@#"
								}
							},
							"response": []
						},
						{
							"name": "GetClassRecordingByEmptyClassId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/class/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"class",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllRecordingsWithoutEP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllRecordingsInvalidEP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/same",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"same"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassWithoutClassId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic9999 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassWithoutBatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic9999 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassWithoutClassDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\r\n\"classTopic\":\"topic9999 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassInvalidClassDateFormat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"10-2025-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic9999 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassSpecCharClassDateFormat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"@2-*&^&-06T00:04:41.220Z\",\r\n\"classTopic\":\"topic9999 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassWithEmptyStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic9999 \",\r\n\"classStatus\": \" \",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateClassWithNonExtClassStaffId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic9999 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassWithEmptyClassTopic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"  \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassWithNumClassTopic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":123456,\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassWithoutClassTopicField",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassWithoutClassScheduleDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic9999 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateNewClassWithAllEmptyFields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\": ,\r\n\"classNo\": ,\r\n\"classDate\": \"\",\r\n\"classStatus\": \"\",\r\n\"classStaffId\": \"\",\r\n\"classDescription\": \"\",\r\n\"classComments\": \"\",\r\n\"classNotes\": \"\",\r\n\"classRecordingPath\": \"\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateRecoPathWithIntegerPath",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"classRecordingPath\": 123456,\r\n\"csId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClassrecording/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClassrecording",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateRecoPathWithEmptyPath Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Bad Request\", function (){\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"classRecordingPath\": \" \",\r\n\"csId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClassrecording/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClassrecording",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteClassByNonExtClassId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/deleteByClass/1000000",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deleteByClass",
										"1000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteClassWithEmptyClassId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/deleteByClass/",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deleteByClass",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteClassWithoutEP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Not Found\", function (){\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"    pm.collectionVariables.set(\"CurrentTestType\",\"No Auth Testing\");\r",
											" pm.execution.setNextRequest(\"29256354-39cb08b6-2d01-43ff-8e31-ff1b319a40af\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"892"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "No Auth Testing",
			"item": [
				{
					"name": "ProgramModule-No Auth",
					"item": [
						{
							"name": "Post program with no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"var currentTestType = pm.collectionVariables.get(\"CurrentTestType\");",
											"if (currentTestType !== \"No Auth Testing\") { ",
											"pm.execution.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSelenium\",\r\n\"programName\": \"TestdataSelenium\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/saveprogram",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post program with no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSelenium\",\r\n\"programName\": \"TestdataSelenium\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/saveprogram",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put program with no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSelenium\",\r\n\"programName\": \"TestdataSeleniumone\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/program/Pranushadataexample",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"program",
										"Pranushadataexample"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put program with no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSelenium\",\r\n\"programName\": \"TestdataSeleniumone\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/program/Pranushadataexample",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"program",
										"Pranushadataexample"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get program with no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/allProgramsWithUsers",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"allProgramsWithUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get program with no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/allProgramsWithUsers",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"allProgramsWithUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete program with no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/deletebyprogid/1700998",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deletebyprogid",
										"1700998"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete program with no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/deletebyprogid/1700998",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deletebyprogid",
										"1700998"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Programs with allUsers no authorization",
							"request": {
								"auth": {
									"type": "bearer"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/allProgramsWithUsers",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"allProgramsWithUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "create a User with valid endpoint and request body no  auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"status test has Created\", function (){\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"programDescription\": \"TestdataSelenium\",\r\n\"programName\": \"TestdataSelenium\",\r\n\"programStatus\": \"Active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/saveprogram",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Batch-No Auth",
					"item": [
						{
							"name": "getAllBatches",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(`Status Message Un Authorized`, function () {\r",
											"pm.response.to.have.status('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "createNewBatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(`Status Message Un Authorized`, function () {\r",
											"pm.response.to.have.status('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"batchName\":\"java006\",\r\n \"batchDescription\":\"Java Course\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":3,\r\n \"programId\":16800\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/batches",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "getBatchByBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test('Status Code 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(`Status Message Un Authorized`, function () {\r",
											"pm.response.to.have.status('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/batchId/10012",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"batchId",
										"10012"
									]
								}
							},
							"response": []
						},
						{
							"name": "getBatchByBatchName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(`Status Message Un Authorized`, function () {\r",
											"pm.response.to.have.status('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/batchName/java001",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"batchName",
										"java001"
									]
								}
							},
							"response": []
						},
						{
							"name": "getBatchByProgramId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(`Status Message Un Authorized`, function () {\r",
											"pm.response.to.have.status('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/program/16800",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"program",
										"16800"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateBatchByBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(`Status Message Un Authorized`, function () {\r",
											"pm.response.to.have.status('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"batchName\":\"Cierro22\",\r\n \"batchDescription\":\"Cierro Concepts\",  \r\n \"batchStatus\":\"Active\",\r\n \"batchNoOfClasses\":4,\r\n \"programId\":16761\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/batches/10012",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"10012"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteBatchByBatchId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(`Status Message Un Authorized`, function () {\r",
											"pm.response.to.have.status('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/batches/10012",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"batches",
										"10012"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{authToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "UserModule-No Auth",
					"item": [
						{
							"name": "PostUser-NoAuth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "getAllUsers-NoAuth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllActiveUsers-No Auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/activeUsers",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"activeUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetActiveEmailUsers-No Auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/fetch-emails",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"fetch-emails"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllRoles-No Auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/roles",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserByUserId-No Auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAlluserswithroles-No Auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/roles",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserStatusCount-No Auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/byStatus",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"byStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUserDetailsbyUserId-No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/details/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"details",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PutUserRoleId-No Auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userRoleList\": [\n    {\n      \"roleId\": \"{{upadteRoleId}}\",\n      \"userRoleStatus\": \"{{updateuserRoleStatus}}\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleId/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleId",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by roleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\",  () => {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"facets\":{\r\n \"facetedFields\": [\r\n {\r\n \"displayName\":\"{{displayName}}\",\r\n \"filterValues\": [\r\n {\r\n \"count\":\"{{count}}\",\r\n \"name\":\"{{name}}\"\r\n }\r\n ]\r\n }\r\n ]\r\n },\r\n \"users\": [\r\n {\r\n \"userComments\":\"{{userComments}}\",\r\n \"userEduPg\":\"{{userEduPg}}\",\r\n \"userEduUg\":\"{{userEduUg}}\",\r\n \"userFirstName\":\"{{userFirstName}}\",\r\n \"userId\":\"{{userId}}\",\r\n \"userLastName\":\"{{userLastName}}\",\r\n \"userLinkedinUrl\":\"{{userLinkedinUrl}}\",\r\n \"userLocation\":\"{{userLocation}}\",\r\n \"userLoginEmail\":\"{{userLoginEmail}}\",\r\n \"userMiddleName\":\"{{userMiddleName}}\",\r\n \"userPhoneNumber\":{{userPhoneNumber}},\r\n \"userTimeZone\":\"{{userTimeZone}}\",\r\n \"userVisaStatus\":\"{{userVisaStatus}}\"\r\n }\r\n ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/v2/users",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users by roleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roles/{{roleId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roles",
										"{{roleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users batchId by userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\",  () => {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/user/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get programs by batchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/programBatch/{{batchId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"programBatch",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users for program by programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/users/programs/{{programId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"programs",
										"{{programId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update roleProgramBatchStatus by userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Validate response structure and values\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"\r",
											"    console.log(\"Response JSON:\", responseJson);\r",
											"    var userid = pm.collectionVariables.get(\"userId\");\r",
											"    pm.expect(responseJson).to.have.property(\"message\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"success\").that.is.a(\"boolean\");\r",
											"\r",
											"    pm.expect(responseJson.message).to.eql(\"User \"+userid+\" has been successfully assigned to Program/Batch(es)\");\r",
											"    pm.expect(responseJson.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"programId\":{{programId}},\r\n \"roleId\":\"{{roleId}}\",\r\n \"userId\":\"{{userId}}\",\r\n \"userRoleProgramBatches\": [\r\n {\r\n \"batchId\":{{batchId}},\r\n \"userRoleProgramBatchStatus\":\r\n \"{{userRoleProgramBatchStatus}}\"\r\n }\r\n ]\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/roleProgramBatchStatus/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"roleProgramBatchStatus",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User by UserId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",  () => {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body Structure and Data Types\", function () {\r",
											"    let response = pm.response.json();\r",
											"    pm.expect(response).to.have.property(\"userComments\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userEduPg\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userEduUg\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userFirstName\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userId\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userLastName\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userLinkedinUrl\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userLocation\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userMiddleName\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userPhoneNumber\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userTimeZone\").that.is.a(\"string\");\r",
											"    pm.expect(response).to.have.property(\"userVisaStatus\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Specific Response Data Values\", function () {\r",
											"    let response = pm.response.json();\r",
											"   // pm.expect(response.userFirstName).to.eql(pm.variables.get(\"userFirstName\"));\r",
											"   // pm.expect(response.userPhoneNumber).to.eql(pm.variables.get(\"userPhoneNumber\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\", \r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedUrl}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update userlogin status by userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify response\", () => {\r",
											"    const responseText = pm.response.text();\r",
											"   var userid = pm.collectionVariables.get(\"userId\"); \r",
											"    userid = String(userid);\r",
											"    pm.expect(responseText).to.include(\"UserLoginEmail/Status Updated for User: \"+userid);\r",
											"    pm.expect(responseText.includes(\"UserLoginEmail/Status Updated for User: \"+userid)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"//pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"//    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"//});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"// using above condition we can implement consept of reusabitily \r",
											"//this test cases works for normal positive scenarios with collection variables,data driven testing and negative noAuth testing\r",
											"{\r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint=pm.iterationData.get(\"EndPoint\")+ pm.collectionVariables.get(\"userId\");\r",
											"\r",
											"    var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"    var constructedUrl=baseUrl + apiEndpoint;\r",
											"\r",
											"    console.log(constructedUrl);\r",
											"    console.log(actualUrl);\r",
											"    if (constructedUrl == actualUrl)\r",
											"    {\r",
											"        var actualMethod = pm.request.method.toUpperCase();\r",
											"        var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"        console.log(actualMethod);\r",
											"        console.log(expectedMethod);\r",
											"\r",
											"        if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"        else\r",
											"        {\r",
											"            let status = pm.iterationData.get(\"status\");\r",
											"            let userLoginEmail = pm.iterationData.get(\"userLoginEmail\");\r",
											"            let loginstatus = pm.iterationData.get(\"loginstatus\");   \r",
											"            let chkroleid =pm.collectionVariables.get(\"roleId\");\r",
											"\r",
											"            pm.variables.set(\"status\", status);\r",
											"            pm.variables.set(\"userLoginEmail\", userLoginEmail);\r",
											"            pm.variables.set(\"loginstatus\", loginstatus);  \r",
											"            pm.variables.set(\"roleId\", chkroleid);    \r",
											"             \r",
											"            \r",
											"            console.log(\"Status:\", status);\r",
											"            console.log(\"User Login Email:\", userLoginEmail);\r",
											"            console.log(\"User Login status:\", loginstatus);\r",
											"\r",
											"            pm.variables.set('statusCode', pm.iterationData.get(\"statusCode\"));\r",
											"            pm.variables.set('statusMessage', pm.iterationData.get(\"statusMessage\"));\r",
											"            pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"        }    \r",
											"        /*if (!pm.variables.get(\"status\") || !pm.variables.get(\"userLoginEmail\")||!pm.variables.get(\"loginstatus\"))\r",
											"        {\r",
											"            throw new Error(\"Mandatory fields `status` or `userLoginEmail` are missing from data file.\");\r",
											"        }*/\r",
											"        console.log(\"Pre-request script executed successfully. Ready to send the request.\");\r",
											"    }\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n \"loginStatus\":\"{{loginstatus}}\",\r\n //\"password\":\"Happy\",\r\n //\"message\": \"JSON parse error: Unrecognized field \\\"password\\\" (class com.numpyninja.lms.dto.UserLoginDto), not marked as ignorable\",  \r\n //raise bug in jira  \r\n \"roleIds\": [\r\n \"{{roleId}}\"\r\n ],\r\n \"status\":\"{{status}}\",\r\n\"userLoginEmail\":\"{{userLoginEmail}}\"\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/userLogin/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"userLogin",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Validate Headers\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
											"});\r",
											"\r",
											"pm.test(`Content-Type: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(`Response time: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"pm.test(`Post Response Code : ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(`Status Message: ${pm.variables.get(\"TestCase\")}`, function () {\r",
											"    pm.response.to.have.status(pm.variables.get(\"expectedStatusMessage\"));\r",
											"});\r",
											"\r",
											"//trying to delete same user - should show user already deleted message"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.iterationData && Object.keys(pm.iterationData.toObject()).length > 0) \r",
											"{\r",
											"    // using above condition we can implement consept of reusabitily \r",
											"    //this test cases works for normal positive scenarios with collection variables,data driven testing and negative noAuth testing\r",
											"    var baseUrl = pm.collectionVariables.get(\"lmsbaseurl\");\r",
											"    var apiEndpoint =pm.iterationData.get(\"EndPoint\")+pm.collectionVariables.get(\"userId\");\r",
											"\r",
											"    var constructedUrl=baseUrl+ apiEndpoint;\r",
											"    var actualUrl =pm.variables.replaceIn(pm.request.url).toString();\r",
											"    \r",
											"    console.log(constructedUrl);\r",
											"    console.log(actualUrl);\r",
											"\r",
											"    if (constructedUrl == actualUrl )\r",
											"    {\r",
											"        var actualMethod = pm.request.method.toUpperCase();\r",
											"        var expectedMethod = pm.iterationData.get(\"RequestType\").toUpperCase();\r",
											"\r",
											"        console.log(actualMethod);\r",
											"        console.log(expectedMethod);\r",
											"\r",
											"        if (constructedUrl !== actualUrl || expectedMethod !== actualMethod)\r",
											"        {\r",
											"            pm.execution.skipRequest();\r",
											"        }\r",
											"        else{\r",
											"            pm.variables.set('statusCode', pm.iterationData.get(\"statusCode\"));\r",
											"            pm.variables.set('statusMessage', pm.iterationData.get(\"statusMessage\"));\r",
											"            pm.variables.set('TestCase', pm.iterationData.get(\"TestCase\"));\r",
											"        }\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/users/{{userId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ClassModule-No Auth",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"batchId\":8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\":\"topic99 \",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"morningclass\",\r\n\"classComments\": \"Comments\",\r\n\"classNotes\": \"classNotes\",\r\n\"classRecordingPath\": \"Path1.2.3\",\r\n\"classScheduledDates\": [\r\n\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/CreateClassSchedule",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"CreateClassSchedule"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClasses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/allClasses",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"allClasses"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClassDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/class/{{ClassId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"class",
										"{{ClassId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClassesByTopic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classes/{{ClassTopic}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classes",
										"{{ClassTopic}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClassesByStaffId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classesByStaff/U23",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classesByStaff",
										"U23"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllClassesByBatchId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{lmsbaseurl}}/classesbyBatch/{{BatchId}}",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"classesbyBatch",
										"{{BatchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateClass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"batchId\": 8433,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-10-06T19:04:41.220Z\",\r\n\"classTopic\": \"Topic9\",\r\n\"classStatus\": \"active\",\r\n\"classStaffId\": \"U234\",\r\n\"classDescription\": \"EveningClass\",\r\n\"classComments\": \"Commentss\",\r\n\"classNotes\": \"Notes12\",\r\n\"classRecordingPath\": \"Path1.2.3.4.\",\r\n\"classScheduledDates\": [\"2025-10-06T19:04:41.220Z\"\r\n]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClass/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClass",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateClassRecording",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"classRecordingPath\": 54321,\r\n\"csId\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/updateClassrecording/892",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"updateClassrecording",
										"892"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteClass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{lmsbaseurl}}/deleteByClass/736",
									"host": [
										"{{lmsbaseurl}}"
									],
									"path": [
										"deleteByClass",
										"736"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "lmsbaseurl",
			"value": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": ""
		},
		{
			"key": "programName",
			"value": ""
		},
		{
			"key": "programId",
			"value": "17008"
		},
		{
			"key": "batchId",
			"value": "9654"
		},
		{
			"key": "batchname",
			"value": "java0011"
		},
		{
			"key": "phoneNumber",
			"value": ""
		},
		{
			"key": "userId",
			"value": "U830"
		},
		{
			"key": "ClassId",
			"value": "",
			"type": "string"
		},
		{
			"key": "ClassTopic",
			"value": "",
			"type": "string"
		},
		{
			"key": "roleId",
			"value": "R01",
			"type": "string"
		},
		{
			"key": "CurrentTestType",
			"value": ""
		}
	]
}